"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Discord –±–æ—Ç–∞ VLG
"""

import discord
from discord.ext import commands
from discord import app_commands
import logging
import asyncio
import threading
import json
import os
import time
import traceback
import contextlib
from datetime import datetime, timezone, timedelta
from config import config
from utils.logger import init_logging, setup_logger, get_error_count
from utils.db import create_tables
from utils.discord_logger import discord_logger, log_to_channel, log_error
from utils.kb import load_kb
from utils.rate_limiter import throttled_send

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
init_logging()
logger = logging.getLogger(__name__)

@contextlib.contextmanager
def timed(section: str, logger):
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    t0 = time.perf_counter()
    try:
        yield
        dt = (time.perf_counter() - t0) * 1000
        logger.debug(f"‚úÖ {section} ‚Äî –≥–æ—Ç–æ–≤–æ –∑–∞ {dt:.1f} ms")
    except Exception:
        dt = (time.perf_counter() - t0) * 1000
        logger.error(f"‚ùå {section} ‚Äî –æ—à–∏–±–∫–∞ —Å–ø—É—Å—Ç—è {dt:.1f} ms")
        raise

logger.info("=" * 60)
logger.info("üöÄ –ó–ê–ü–£–°–ö DISCORD –ë–û–¢–ê VLG")
logger.info("=" * 60)

start_time = time.time()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ intents
logger.debug("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Discord intents...")
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
logger.debug("‚úÖ Discord intents –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
logger.debug("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞...")
bot = commands.Bot(
    command_prefix="/", intents=intents, application_id=config.APPLICATION_ID
)
logger.debug(f"‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω —Å APPLICATION_ID: {config.APPLICATION_ID}")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥
_commands_synced = False
_sync_lock = asyncio.Lock()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
loaded = []
failed = []

async def load_extension_safe(ext: str):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        await bot.load_extension(ext)
        loaded.append(ext)
        logger.debug(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {ext}")
    except Exception as e:
        failed.append((ext, e))
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è {ext}: {e}")


async def setup_hook():
    """–•—É–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –±–æ—Ç–∞, –Ω–æ –¥–æ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"""
    global _commands_synced

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    with timed("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π", logger):
        os.makedirs("data", exist_ok=True)
        os.makedirs("logs", exist_ok=True)

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    with timed("–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", logger):
        config.validate()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    extensions = [
        "handlers.wipes",
        "cogs.roles",
        "cogs.ai",
        "cogs.application_system",
        "cogs.admin_panel",
        "cogs.nickname_admin",
        "cogs.nickname_checker",
        "cogs.kb_sync",
        "handlers.tickets",
    ]

    for ext in extensions:
        await load_extension_safe(ext)

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π: {len(loaded)} —É—Å–ø–µ—à–Ω–æ, {len(failed)} —Å –æ—à–∏–±–∫–∞–º–∏")

    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è slash-–∫–æ–º–∞–Ω–¥ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    async with _sync_lock:
        if not _commands_synced:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (—Ñ–∞–π–ª-–º–∞—Ä–∫–µ—Ä)
                sync_needed = not os.path.exists("data/commands_synced.flag") or os.getenv("FORCE_SYNC_COMMANDS") == "true"
                
                if sync_needed:
                    with timed("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è slash-–∫–æ–º–∞–Ω–¥", logger):
                        synced = await asyncio.wait_for(bot.tree.sync(), timeout=30.0)
                        _commands_synced = True
                        logger.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–º–∞–Ω–¥: {len(synced)}")
                        
                        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª-–º–∞—Ä–∫–µ—Ä
                        with open("data/commands_synced.flag", "w") as f:
                            f.write(f"synced_{len(synced)}_commands")
                else:
                    _commands_synced = True
                    logger.info("‚ö° –ü—Ä–æ–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ (—É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã)")
            except asyncio.TimeoutError:
                logger.warning("‚è∞ –¢–∞–π–º–∞—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ (30—Å), –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")

    # –í–µ–±-—Å–µ—Ä–≤–µ—Ä —Å—Ç–∞—Ç—É—Å–∞
    with timed("–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞", logger):
        start_web_server()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    with timed("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î", logger):
        from utils.db import is_db_available
        await create_tables()
        if not is_db_available():
            logger.info("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –Ω–µ—ë")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–µ—à–µ–π
    with timed("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–µ—à–µ–π", logger):
        from utils.cache import cache
        cache.info()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    with timed("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π", logger):
        kb_stats = load_kb()
        chunks_count = kb_stats.get('chunks', 0)
        if chunks_count > 0:
            logger.info(f"üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {chunks_count} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤")
        else:
            logger.info("üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞")


# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º setup_hook
bot.setup_hook = setup_hook


def update_bot_status():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª–µ"""
    # –í—Ä–µ–º—è –ø–æ –ë–∞–∫—É (UTC+4)
    baku_tz = timezone(timedelta(hours=4))
    baku_time = datetime.now(baku_tz)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ä–≤–µ—Ä–µ –µ—Å–ª–∏ –±–æ—Ç –≥–æ—Ç–æ–≤
    guild_count = 0
    member_count = 0

    if bot.is_ready() and bot.guilds:
        guild_count = len(bot.guilds)
        member_count = sum(guild.member_count or 0 for guild in bot.guilds)

    status_data = {
        "last_update": baku_time.strftime("%d.%m.%Y %H:%M:%S"),
        "status": "online" if bot.is_ready() else "starting",
        "guild_count": guild_count,
        "member_count": member_count,
    }

    try:
        with open("status.json", "w", encoding="utf-8") as f:
            json.dump(status_data, f, ensure_ascii=False, indent=2)
        logger.debug(f"üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
_web_server_started = False
_web_server_lock = threading.Lock()


def start_web_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
    global _web_server_started

    with _web_server_lock:
        if _web_server_started:
            logger.debug("üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return

        try:
            from web_server import run_web_server, set_bot_instance

            set_bot_instance(bot)
            server_thread = threading.Thread(
                target=run_web_server, daemon=True, name="WebServer"
            )
            server_thread.start()
            _web_server_started = True
            logger.info("üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
            _web_server_started = False


@bot.event
async def on_connect():
    """–°–æ–±—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Discord"""
    logger.debug("üîå Discord: on_connect")

@bot.event
async def on_ready() -> None:
    """–°–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    total_time = time.time() - start_time

    try:
        guilds = len(bot.guilds)
        users = sum(g.member_count or 0 for g in bot.guilds)
    except Exception:
        guilds, users = len(bot.guilds), 0

    latency_ms = bot.latency * 1000 if getattr(bot, "latency", None) else 0

    logger.info("=" * 60)
    logger.info("üéâ –ë–û–¢ –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!")
    logger.info("=" * 60)
    logger.info(f"ü§ñ –ò–º—è –±–æ—Ç–∞: {bot.user}")
    logger.info(f"üÜî ID –±–æ—Ç–∞: {bot.user.id if bot.user else 'Unknown'}")
    logger.info(f"üü¢ –ë–æ—Ç –≥–æ—Ç–æ–≤: –≥–∏–ª—å–¥–∏–π={guilds}, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤~={users}, latency={latency_ms:.0f} ms")

    if bot.guilds:
        for guild in bot.guilds:
            logger.debug(f"   üè† {guild.name}: {guild.member_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Discord –ª–æ–≥–≥–µ—Ä
    discord_logger.set_bot(bot)

    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–≥–µ—Ä —Å –±–æ—Ç–æ–º –¥–ª—è Discord handler
    setup_logger(bot)

    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ Discord –∫–∞–Ω–∞–ª
    discord_logger.info(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: {bot.user}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AutoResponseHandler
    try:
        from handlers.auto_response import AutoResponseHandler
        auto_response_handler = AutoResponseHandler(bot)
        bot._auto_response_handler = auto_response_handler
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AutoResponseHandler: {e}")

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è persistent views –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∑–∞—è–≤–æ–∫
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º views –∏–∑ —Ä–∞–∑–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        from handlers.novichok_actions import (
            TicketActionView, RecheckApplicationView
        )
        from cogs.application_system import (
            ApplicationButton, DeleteApplicationView, ReadyButtonView, ConfirmDeleteView
        )
        from handlers.tickets import NicknameMismatchFixView

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ persistent views –ë–ï–ó –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
        bot.add_view(ApplicationButton())
        bot.add_view(DeleteApplicationView())
        bot.add_view(ReadyButtonView())
        bot.add_view(TicketActionView())
        bot.add_view(RecheckApplicationView())
        bot.add_view(NicknameMismatchFixView())
        bot.add_view(ConfirmDeleteView())

        logger.info("‚úÖ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ view (–∫–Ω–æ–ø–∫–∏ –∑–∞—è–≤–æ–∫) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ persistent views: {e}")

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
    update_bot_status()

    logger.info("=" * 60)
    logger.info("üü¢ –ë–û–¢ –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–ü–£–©–ï–ù –ò –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï")
    logger.info("=" * 60)

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∑–∞–ø—É—Å–∫–∞ –∏ –æ—à–∏–±–∫–∞–º–∏
    error_count = get_error_count()
    logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {total_time:.2f} c | ‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω | –ü—Ä–æ–±–ª–µ–º –≤—ã—è–≤–ª–µ–Ω–æ: {error_count}")


@bot.event
async def on_message(message: discord.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if message.author.bot or message.author == bot.user:
        return

    # –í–ê–ñ–ù–û: AI –∫–∞–Ω–∞–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –≤ cogs/ai.py
    if message.channel.id == config.AI_RESPONSE_CHANNEL_ID:
        await bot.process_commands(message)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ç–∏–∫–µ—Ç–∞—Ö
    try:
        auto_response_handler = getattr(bot, "_auto_response_handler", None)
        if auto_response_handler:
            await auto_response_handler.handle_message(message)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞: {e}")

    # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∏–∫–µ—Ç-–∫–∞–Ω–∞–ª)
    if bot.user in message.mentions and not (
        hasattr(message.channel, "name")
        and getattr(message.channel, "name", "").startswith(config.TICKET_CHANNEL_PREFIX)
    ):
        try:
            await throttled_send(
                message.channel,
                f"üëã –ü—Ä–∏–≤–µ—Ç, {message.author.mention}! "
                f"–Ø –ø–æ–º–æ—â–Ω–∏–∫ –î–µ—Ä–µ–≤–Ω–∏ VLG. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!",
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {e}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    await bot.process_commands(message)


@bot.event
async def on_interaction(interaction: discord.Interaction) -> None:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π"""
    if interaction.type == discord.InteractionType.application_command:
        command_name = interaction.command.name if interaction.command else "unknown"
        logger.debug(f"‚ö° –ö–æ–º–∞–Ω–¥–∞: /{command_name} –æ—Ç {interaction.user}")

    elif interaction.type == discord.InteractionType.component:
        custom_id = interaction.data.get('custom_id', 'unknown') if interaction.data else 'unknown'
        logger.debug(f"üéõÔ∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç: {custom_id} –æ—Ç {interaction.user}")


@bot.event
async def on_error(event: str, *args, **kwargs) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞"""
    error_msg = traceback.format_exc()
    logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ —Å–æ–±—ã—Ç–∏–∏ {event}:")
    logger.error(error_msg)

    # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ Discord –∫–∞–Ω–∞–ª
    try:
        await log_error(Exception(f"–û—à–∏–±–∫–∞ –≤ —Å–æ–±—ã—Ç–∏–∏ {event}"), error_msg[:500])
    except Exception as log_error_ex:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É: {log_error_ex}")


@bot.tree.command(
    name="sync_commands",
    description="–ü–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å slash-–∫–æ–º–∞–Ω–¥ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)",
)
@app_commands.guild_only()
async def sync_commands(interaction: discord.Interaction):
    """–ü–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è slash-–∫–æ–º–∞–Ω–¥"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not (hasattr(interaction.user, 'guild_permissions') and
            getattr(interaction.user, 'guild_permissions', None) and
            interaction.user.guild_permissions.administrator):
        await interaction.response.send_message(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥.", ephemeral=True
        )
        return

    await interaction.response.defer(ephemeral=True)

    try:
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –≥–∏–ª—å–¥–∏–∏
        synced = await bot.tree.sync(guild=interaction.guild)
        await interaction.followup.send(
            f"‚úÖ **–ö–æ–º–∞–Ω–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!**\n\n"
            f"üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–º–∞–Ω–¥: **{len(synced)}**",
            ephemeral=True,
        )
        logger.info(f"üîÑ {interaction.user.display_name} –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª {len(synced)} –∫–æ–º–∞–Ω–¥")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")
        await interaction.followup.send(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {str(e)}", ephemeral=True
        )


@bot.tree.error
async def on_app_command_error(
    interaction: discord.Interaction, error: discord.app_commands.AppCommandError
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ slash-–∫–æ–º–∞–Ω–¥"""
    command_name = interaction.command.name if interaction.command else "unknown"

    try:
        if isinstance(error, discord.app_commands.CommandOnCooldown):
            logger.warning(f"‚è∞ –ö–æ–º–∞–Ω–¥–∞ /{command_name}: –∫—É–ª–¥–∞—É–Ω ({error.retry_after:.2f}—Å)")
            if not interaction.response.is_done():
                await interaction.response.send_message(
                    f"–ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {error.retry_after:.2f} —Å–µ–∫—É–Ω–¥.",
                    ephemeral=True,
                )
        elif isinstance(error, discord.app_commands.MissingPermissions):
            logger.warning(f"üö´ –ö–æ–º–∞–Ω–¥–∞ /{command_name}: –Ω–µ—Ç –ø—Ä–∞–≤ —É {interaction.user}")
            if not interaction.response.is_done():
                await interaction.response.send_message(
                    "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", ephemeral=True
                )
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /{command_name}: {error}")
            if not interaction.response.is_done():
                await interaction.response.send_message(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.", ephemeral=True
                )
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫ slash-–∫–æ–º–∞–Ω–¥: {e}")


async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        await create_tables()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ—ë: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        os.makedirs("data", exist_ok=True)
        os.makedirs("logs", exist_ok=True)

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config.validate()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
        def signal_handler(signum, frame):
            logger.info(f"üî¥ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            asyncio.create_task(bot.close())

        import signal
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)

        await bot.start(config.DISCORD_TOKEN)
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}\n{traceback.format_exc()}")
        raise


if __name__ == "__main__":
    asyncio.run(main())