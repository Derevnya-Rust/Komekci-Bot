import discord
from discord.ext import commands
from discord import app_commands
import logging
import asyncio
import os
import json
from datetime import datetime, timezone
from config import config

logger = logging.getLogger(__name__)


def load_bot_settings():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open("bot_settings.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_settings = {
            "ticket_system": {"channel_prefix": "new_", "auto_responses": True},
            "channels": {
                "notification_channel": config.NOTIFICATION_CHANNEL_ID,
                "log_channel": config.LOG_CHANNEL_ID,
                "mod_channel": config.MOD_CHANNEL_ID,
                "debug_channel": config.DEBUG_CHANNEL_ID,
            },
            "security": {"min_account_age_days": config.MIN_ACCOUNT_AGE_DAYS},
            "general": {
                "custom_member_count": "",
                "bot_status_text": "–∑–∞ –î–µ—Ä–µ–≤–Ω–µ–π VLG",
            },
            "ai": {"custom_system_prompt": ""},
            "messages": {"welcome_template": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –î–µ—Ä–µ–≤–Ω—é VLG!"},
            "application_form": {
                "fields": {
                    "steam_profile": {
                        "label": "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à Steam-–ø—Ä–æ—Ñ–∏–ª—å",
                        "placeholder": "https://steamcommunity.com/profiles/YOUR_ID",
                        "required": True,
                        "max_length": 200,
                    },
                    "questions": {
                        "label": "‚ùì –ï—Å—Ç—å –ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –î–µ—Ä–µ–≤–Ω—é –Ω–∞—à—É?",
                        "placeholder": "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
                        "required": False,
                        "max_length": 500,
                    },
                }
            },
        }
        save_bot_settings(default_settings)
        return default_settings


def save_bot_settings(settings):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª"""
    try:
        with open("bot_settings.json", "w", encoding="utf-8") as f:
            json.dump(settings, f, ensure_ascii=False, indent=2)
        logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        raise


class AdminSettingsModal(discord.ui.Modal):
    def __init__(self, setting_type: str, current_value: str = ""):
        super().__init__(title=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞: {setting_type}")
        self.setting_type = setting_type

        self.value_input = discord.ui.TextInput(
            label="–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
            placeholder=f"–¢–µ–∫—É—â–µ–µ: {current_value}",
            default=current_value,
            required=True,
            max_length=500 if setting_type != "ai_prompt" else 2000,
            style=(
                discord.TextStyle.paragraph
                if setting_type == "ai_prompt"
                else discord.TextStyle.short
            ),
        )
        self.add_item(self.value_input)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings = load_bot_settings()
            new_value = self.value_input.value.strip()

            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            if self.setting_type == "ticket_prefix":
                settings["ticket_system"]["channel_prefix"] = new_value
            elif self.setting_type == "min_account_age":
                settings["security"]["min_account_age_days"] = int(new_value)
            elif self.setting_type == "member_count":
                settings["general"]["custom_member_count"] = new_value
            elif self.setting_type == "bot_status":
                settings["general"]["bot_status_text"] = new_value
            elif self.setting_type == "ai_prompt":
                settings["ai"]["custom_system_prompt"] = new_value
            elif self.setting_type == "welcome_message":
                settings["messages"]["welcome_template"] = new_value

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            save_bot_settings(settings)

            await interaction.response.send_message(
                f"‚úÖ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!**\n\n"
                f"**{self.setting_type}:** `{new_value}`\n\n"
                f"‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.",
                ephemeral=True,
            )

            logger.info(
                f"üîß {interaction.user.display_name} –∏–∑–º–µ–Ω–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É {self.setting_type}: {new_value}"
            )

        except ValueError:
            await interaction.response.send_message(
                "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!", ephemeral=True
            )
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}", ephemeral=True
            )


class ChannelSelectModal(discord.ui.Modal):
    def __init__(self, channel_type: str, current_id: int = None):
        super().__init__(title=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞: {channel_type}")
        self.channel_type = channel_type

        self.channel_input = discord.ui.TextInput(
            label="ID –∫–∞–Ω–∞–ª–∞",
            placeholder=f"–¢–µ–∫—É—â–∏–π ID: {current_id or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}",
            default=str(current_id) if current_id else "",
            required=True,
            max_length=20,
        )
        self.add_item(self.channel_input)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            channel_id = int(self.channel_input.value.strip())
            channel = interaction.guild.get_channel(channel_id)

            if not channel:
                await interaction.response.send_message(
                    "‚ùå –ö–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!", ephemeral=True
                )
                return

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings = load_bot_settings()
            settings["channels"][self.channel_type] = channel_id
            save_bot_settings(settings)

            await interaction.response.send_message(
                f"‚úÖ **–ö–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
                f"**{self.channel_type}:** {channel.mention} (`{channel_id}`)",
                ephemeral=True,
            )

            logger.info(
                f"üîß {interaction.user.display_name} –∏–∑–º–µ–Ω–∏–ª –∫–∞–Ω–∞–ª {self.channel_type}: {channel.name} ({channel_id})"
            )

        except ValueError:
            await interaction.response.send_message(
                "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)!",
                ephemeral=True,
            )
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}", ephemeral=True
            )


class AdminPanelView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(
        label="üìã –°–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–æ–∫",
        style=discord.ButtonStyle.primary,
        custom_id="admin_tickets",
    )
    async def ticket_settings(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ):
        embed = discord.Embed(title="üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∑–∞—è–≤–æ–∫", color=0x00FF00)

        settings = load_bot_settings()
        ticket_settings = settings.get("ticket_system", {})

        embed.add_field(
            name="üè∑Ô∏è –ü—Ä–µ—Ñ–∏–∫—Å –∫–∞–Ω–∞–ª–æ–≤ –∑–∞—è–≤–æ–∫",
            value=f"`{ticket_settings.get('channel_prefix', 'new_')}`",
            inline=False,
        )

        embed.add_field(
            name="‚è∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞",
            value=f"{settings.get('security', {}).get('min_account_age_days', 90)} –¥–Ω–µ–π",
            inline=False,
        )

        view = TicketSettingsView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

    @discord.ui.button(
        label="üìù –ê–Ω–∫–µ—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞",
        style=discord.ButtonStyle.success,
        custom_id="admin_form",
    )
    async def form_settings(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ):
        embed = discord.Embed(title="üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∫–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã", color=0x00FF99)

        settings = load_bot_settings()
        form_settings = settings.get("application_form", {})

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª–µ–π
        fields = form_settings.get("fields", {})

        embed.add_field(
            name="üîó –ü–æ–ª–µ Steam-–ø—Ä–æ—Ñ–∏–ª—è",
            value=f"–ù–∞–∑–≤–∞–Ω–∏–µ: `{fields.get('steam_profile', {}).get('label', 'üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à Steam-–ø—Ä–æ—Ñ–∏–ª—å')}`\n"
            f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ: `{fields.get('steam_profile', {}).get('required', True)}`",
            inline=False,
        )

        embed.add_field(
            name="‚ùì –ü–æ–ª–µ –≤–æ–ø—Ä–æ—Å–æ–≤",
            value=f"–ù–∞–∑–≤–∞–Ω–∏–µ: `{fields.get('questions', {}).get('label', '‚ùì –ï—Å—Ç—å –ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –î–µ—Ä–µ–≤–Ω—é –Ω–∞—à—É?')}`\n"
            f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ: `{fields.get('questions', {}).get('required', False)}`",
            inline=False,
        )

        view = FormSettingsView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

    @discord.ui.button(
        label="üì∫ –ö–∞–Ω–∞–ª—ã",
        style=discord.ButtonStyle.secondary,
        custom_id="admin_channels",
    )
    async def channel_settings(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ):
        embed = discord.Embed(title="üì∫ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤", color=0x0099FF)

        settings = load_bot_settings()
        channels = settings.get("channels", {})

        channel_names = {
            "notification_channel": "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            "log_channel": "üìù –õ–æ–≥–∏",
            "mod_channel": "üëÆ –ú–æ–¥–µ—Ä–∞—Ü–∏—è",
            "debug_channel": "üêõ –û—Ç–ª–∞–¥–∫–∞",
        }

        for key, name in channel_names.items():
            channel_id = channels.get(key)
            if channel_id:
                channel = interaction.guild.get_channel(channel_id)
                value = (
                    f"{channel.mention} (`{channel_id}`)"
                    if channel
                    else f"–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (`{channel_id}`)"
                )
            else:
                value = "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            embed.add_field(name=name, value=value, inline=False)

        view = ChannelSettingsView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

    @discord.ui.button(
        label="ü§ñ –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
        style=discord.ButtonStyle.success,
        custom_id="admin_general",
    )
    async def general_settings(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ):
        embed = discord.Embed(title="ü§ñ –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", color=0x00FF99)

        settings = load_bot_settings()
        general = settings.get("general", {})

        embed.add_field(
            name="üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            value=f"`{general.get('custom_member_count', '–ê–≤—Ç–æ')}`",
            inline=False,
        )

        embed.add_field(
            name="üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞",
            value=f"`{general.get('bot_status_text', '–∑–∞ –î–µ—Ä–µ–≤–Ω–µ–π VLG')}`",
            inline=False,
        )

        view = GeneralSettingsView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

    @discord.ui.button(
        label="üß† –ò–ò –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", style=discord.ButtonStyle.danger, custom_id="admin_ai"
    )
    async def ai_settings(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ):
        embed = discord.Embed(title="üß† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò", color=0xFF6600)

        settings = load_bot_settings()
        ai_settings = settings.get("ai", {})

        embed.add_field(name="üéØ –ú–æ–¥–µ–ª—å –ò–ò", value=f"`{config.MODEL_ID}`", inline=False)

        custom_prompt = ai_settings.get("custom_system_prompt", "")
        embed.add_field(
            name="üìù –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç",
            value=(
                f"`{custom_prompt[:100]}...`"
                if len(custom_prompt) > 100
                else f"`{custom_prompt or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`"
            ),
            inline=False,
        )

        view = AISettingsView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

    @discord.ui.button(
        label="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–∞–Ω–µ–ª—å",
        style=discord.ButtonStyle.gray,
        custom_id="admin_refresh",
    )
    async def refresh_panel(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ):
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–Ω–µ–ª—å
        updated_embed = create_admin_panel_embed(interaction.guild)
        await interaction.response.edit_message(embed=updated_embed, view=self)


class TicketSettingsView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=300)

    @discord.ui.button(label="üè∑Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å", style=discord.ButtonStyle.primary)
    async def change_prefix(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ):
        settings = load_bot_settings()
        current_prefix = settings.get("ticket_system", {}).get("channel_prefix", "new_")
        modal = AdminSettingsModal("ticket_prefix", current_prefix)
        await interaction.response.send_modal(modal)

    @discord.ui.button(
        label="‚è∞ –ú–∏–Ω. –≤–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞", style=discord.ButtonStyle.secondary
    )
    async def change_account_age(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ):
        settings = load_bot_settings()
        current_age = str(settings.get("security", {}).get("min_account_age_days", 90))
        modal = AdminSettingsModal("min_account_age", current_age)
        await interaction.response.send_modal(modal)


class ChannelSettingsView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=300)

    @discord.ui.button(label="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", style=discord.ButtonStyle.primary)
    async def set_notification_channel(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ):
        settings = load_bot_settings()
        current_id = settings.get("channels", {}).get("notification_channel")
        modal = ChannelSelectModal("notification_channel", current_id)
        await interaction.response.send_modal(modal)

    @discord.ui.button(label="üìù –õ–æ–≥–∏", style=discord.ButtonStyle.secondary)
    async def set_log_channel(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ):
        settings = load_bot_settings()
        current_id = settings.get("channels", {}).get("log_channel")
        modal = ChannelSelectModal("log_channel", current_id)
        await interaction.response.send_modal(modal)

    @discord.ui.button(label="üëÆ –ú–æ–¥–µ—Ä–∞—Ü–∏—è", style=discord.ButtonStyle.success)
    async def set_mod_channel(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ):
        settings = load_bot_settings()
        current_id = settings.get("channels", {}).get("mod_channel")
        modal = ChannelSelectModal("mod_channel", current_id)
        await interaction.response.send_modal(modal)


class GeneralSettingsView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=300)

    @discord.ui.button(
        label="üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", style=discord.ButtonStyle.primary
    )
    async def change_member_count(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ):
        settings = load_bot_settings()
        current_count = settings.get("general", {}).get("custom_member_count", "")
        modal = AdminSettingsModal("member_count", current_count)
        await interaction.response.send_modal(modal)

    @discord.ui.button(label="üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞", style=discord.ButtonStyle.secondary)
    async def change_bot_status(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ):
        settings = load_bot_settings()
        current_status = settings.get("general", {}).get(
            "bot_status_text", "–∑–∞ –î–µ—Ä–µ–≤–Ω–µ–π VLG"
        )
        modal = AdminSettingsModal("bot_status", current_status)
        await interaction.response.send_modal(modal)


class AISettingsView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=300)

    @discord.ui.button(label="üìù –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", style=discord.ButtonStyle.primary)
    async def change_ai_prompt(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ):
        settings = load_bot_settings()
        current_prompt = settings.get("ai", {}).get("custom_system_prompt", "")
        modal = AdminSettingsModal("ai_prompt", current_prompt)
        await interaction.response.send_modal(modal)


class FormFieldModal(discord.ui.Modal):
    def __init__(self, field_name: str, current_settings: dict):
        super().__init__(title=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—è: {field_name}")
        self.field_name = field_name

        self.label_input = discord.ui.TextInput(
            label="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è",
            placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —É–≤–∏–¥—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
            default=current_settings.get("label", ""),
            required=True,
            max_length=80,
        )
        self.add_item(self.label_input)

        self.placeholder_input = discord.ui.TextInput(
            label="–ü–æ–¥—Å–∫–∞–∑–∫–∞ (placeholder)",
            placeholder="–¢–µ–∫—Å—Ç-–ø–æ–¥—Å–∫–∞–∑–∫–∞ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞",
            default=current_settings.get("placeholder", ""),
            required=False,
            max_length=150,
        )
        self.add_item(self.placeholder_input)

        self.required_input = discord.ui.TextInput(
            label="–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ (–¥–∞/–Ω–µ—Ç)",
            placeholder="–¥–∞ - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ, –Ω–µ—Ç - –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ",
            default="–¥–∞" if current_settings.get("required", False) else "–Ω–µ—Ç",
            required=True,
            max_length=3,
        )
        self.add_item(self.required_input)

        self.max_length_input = discord.ui.TextInput(
            label="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞",
            placeholder="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤",
            default=str(current_settings.get("max_length", 200)),
            required=True,
            max_length=4,
        )
        self.add_item(self.max_length_input)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings = load_bot_settings()
            if "application_form" not in settings:
                settings["application_form"] = {"fields": {}}
            if "fields" not in settings["application_form"]:
                settings["application_form"]["fields"] = {}

            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—è
            is_required = self.required_input.value.lower().strip() in [
                "–¥–∞",
                "yes",
                "true",
                "1",
            ]
            max_length = int(self.max_length_input.value.strip())

            settings["application_form"]["fields"][self.field_name] = {
                "label": self.label_input.value.strip(),
                "placeholder": self.placeholder_input.value.strip(),
                "required": is_required,
                "max_length": max_length,
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            save_bot_settings(settings)

            await interaction.response.send_message(
                f"‚úÖ **–ü–æ–ª–µ '{self.field_name}' –æ–±–Ω–æ–≤–ª–µ–Ω–æ!**\n\n"
                f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** `{self.label_input.value.strip()}`\n"
                f"**–ü–æ–¥—Å–∫–∞–∑–∫–∞:** `{self.placeholder_input.value.strip()}`\n"
                f"**–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ:** `{is_required}`\n"
                f"**–ú–∞–∫—Å. –¥–ª–∏–Ω–∞:** `{max_length}`\n\n"
                f"‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—Ç—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–æ—Ä–º—ã –∑–∞—è–≤–∫–∏.",
                ephemeral=True,
            )

            logger.info(
                f"üîß {interaction.user.display_name} –∏–∑–º–µ–Ω–∏–ª –ø–æ–ª–µ —Ñ–æ—Ä–º—ã {self.field_name}"
            )

        except ValueError:
            await interaction.response.send_message(
                "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã!",
                ephemeral=True,
            )
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—è: {e}", ephemeral=True
            )


class FormSettingsView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=300)

    @discord.ui.button(label="üîó Steam-–ø—Ä–æ—Ñ–∏–ª—å", style=discord.ButtonStyle.primary)
    async def edit_steam_field(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ):
        settings = load_bot_settings()
        current_settings = (
            settings.get("application_form", {})
            .get("fields", {})
            .get("steam_profile", {})
        )
        modal = FormFieldModal("steam_profile", current_settings)
        await interaction.response.send_modal(modal)

    @discord.ui.button(
        label="‚ùì –í–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –î–µ—Ä–µ–≤–Ω—é", style=discord.ButtonStyle.secondary
    )
    async def edit_questions_field(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ):
        settings = load_bot_settings()
        current_settings = (
            settings.get("application_form", {}).get("fields", {}).get("questions", {})
        )
        modal = FormFieldModal("questions", current_settings)
        await interaction.response.send_modal(modal)


def create_admin_panel_embed(guild):
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π embed –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    embed = discord.Embed(
        title="üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å VLG –±–æ—Ç–∞",
        description=(
            "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
        ),
        color=0xFF9900,
    )

    settings = load_bot_settings()

    embed.add_field(
        name="üìã –°–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–æ–∫",
        value=f"–ü—Ä–µ—Ñ–∏–∫—Å: `{settings.get('ticket_system', {}).get('channel_prefix', 'new_')}`",
        inline=True,
    )

    embed.add_field(
        name="ü§ñ –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
        value=f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: `{settings.get('general', {}).get('custom_member_count', '–ê–≤—Ç–æ')}`",
        inline=True,
    )

    embed.add_field(name="üì∫ –ö–∞–Ω–∞–ª—ã", value="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ ID –∫–∞–Ω–∞–ª–æ–≤", inline=True)

    embed.set_footer(text=f"–°–µ—Ä–≤–µ—Ä: {guild.name} ‚Ä¢ {guild.member_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    return embed


class AdminPanel(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ views
        self.bot.add_view(AdminPanelView())

    @app_commands.command(name="check_bot_permissions", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∏ –∏–µ—Ä–∞—Ä—Ö–∏—é —Ä–æ–ª–µ–π –±–æ—Ç–∞")
    @app_commands.guild_only()
    async def check_bot_permissions(self, interaction: discord.Interaction):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –∏ –µ–≥–æ –ø–æ–∑–∏—Ü–∏—é –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Ä–æ–ª–µ–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        user_roles = [role.name for role in interaction.user.roles]
        admin_roles = ["–ñ–∏—Ç–µ–ª—å", "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω"]
        is_owner = interaction.user.id == interaction.guild.owner_id

        if not any(role in user_roles for role in admin_roles) and not is_owner:
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –±–æ—Ç–∞.", ephemeral=True
            )
            return

        guild = interaction.guild
        bot_member = guild.get_member(self.bot.user.id)

        if not bot_member:
            await interaction.response.send_message("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∞—Ö –±–æ—Ç–∞
        permissions = bot_member.guild_permissions
        bot_top_role = bot_member.top_role

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å
        manageable_roles = []
        unmanageable_roles = []

        important_roles = ["–ù–æ–≤–∏—á–æ–∫", "–ì–æ—Å—Ç—å", "–ñ–∏—Ç–µ–ª—å", "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω"]
        for role_name in important_roles:
            role = discord.utils.get(guild.roles, name=role_name)
            if role:
                if role < bot_top_role:  # –ë–æ—Ç –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–æ–ª—å—é –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∏–∂–µ –µ–≥–æ —Ç–æ–ø —Ä–æ–ª–∏
                    manageable_roles.append(role_name)
                else:
                    unmanageable_roles.append(role_name)

        embed = discord.Embed(
            title="ü§ñ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞",
            color=0x00FF00 if permissions.manage_nicknames else 0xFF0000,
            timestamp=datetime.now(timezone.utc),
        )

        embed.add_field(
            name="üè∑Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ",
            value=f"**–ò–º—è:** {bot_member.display_name}\n**–¢–æ–ø —Ä–æ–ª—å:** {bot_top_role.name}\n**–ü–æ–∑–∏—Ü–∏—è —Ä–æ–ª–∏:** {bot_top_role.position}",
            inline=False
        )

        embed.add_field(
            name="üîë –ü—Ä–∞–≤–∞ –±–æ—Ç–∞",
            value=f"**–£–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∏–∫–Ω–µ–π–º–∞–º–∏:** {'‚úÖ' if permissions.manage_nicknames else '‚ùå'}\n"
                  f"**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** {'‚úÖ' if permissions.administrator else '‚ùå'}\n"
                  f"**–£–ø—Ä–∞–≤–ª—è—Ç—å —Ä–æ–ª—è–º–∏:** {'‚úÖ' if permissions.manage_roles else '‚ùå'}",
            inline=False
        )

        if manageable_roles:
            embed.add_field(
                name="‚úÖ –ú–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–æ–ª—è–º–∏",
                value=", ".join(manageable_roles),
                inline=False
            )

        if unmanageable_roles:
            embed.add_field(
                name="‚ùå –ù–ï –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–æ–ª—è–º–∏",
                value=", ".join(unmanageable_roles) + "\n\n**–†–µ—à–µ–Ω–∏–µ:** –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ —Ä–æ–ª—å –±–æ—Ç–∞ –≤—ã—à–µ —ç—Ç–∏—Ö —Ä–æ–ª–µ–π",
                inline=False
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
        problematic_users = []
        for member in guild.members:
            if member.top_role >= bot_top_role and not member.bot:
                problematic_users.append(f"{member.display_name} ({member.top_role.name})")

        if problematic_users:
            embed.add_field(
                name="‚ö†Ô∏è –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å —Ä–æ–ª—è–º–∏ –≤—ã—à–µ –±–æ—Ç–∞",
                value="\n".join(problematic_users[:10]) + (f"\n... –∏ –µ—â—ë {len(problematic_users)-10}" if len(problematic_users) > 10 else ""),
                inline=False
            )

        await interaction.response.send_message(embed=embed, ephemeral=True)

    @app_commands.command(
        name="admin_panel", description="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º"
    )
    @app_commands.guild_only()
    async def admin_panel(self, interaction: discord.Interaction, channel: discord.TextChannel = None):
        """–°–æ–∑–¥–∞–µ—Ç –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ Discord —Å–µ—Ä–≤–µ—Ä–∞
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.",
                ephemeral=True,
            )
            return

        target_channel = channel or interaction.channel

        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π embed
        embed = create_admin_panel_embed(interaction.guild)

        # –°–æ–∑–¥–∞–µ–º view —Å –∫–Ω–æ–ø–∫–∞–º–∏
        view = AdminPanelView()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å
        if channel:
            await target_channel.send(embed=embed, view=view)
            await interaction.response.send_message(
                f"‚úÖ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ –≤ {target_channel.mention}", ephemeral=True
            )
        else:
            await interaction.response.send_message(
                embed=embed, view=view, ephemeral=True
            )

        logger.info(
            f"üîß {interaction.user.display_name} –æ—Ç–∫—Ä—ã–ª –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –≤ {target_channel.name}"
        )

    @app_commands.command(
        name="reload_settings", description="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"
    )
    async def reload_settings(self, interaction: discord.Interaction):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ Discord —Å–µ—Ä–≤–µ—Ä–∞
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                ephemeral=True,
            )
            return

        try:
            settings = load_bot_settings()

            await interaction.response.send_message(
                "‚úÖ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã!**\n\n"
                "üîÑ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–≥—É—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.",
                ephemeral=True,
            )

            logger.info(
                f"üîÑ {interaction.user.display_name} –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"
            )

        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}", ephemeral=True
            )


async def setup(bot: commands.Bot):
    await bot.add_cog(AdminPanel(bot))