import discord
from discord.ext import commands
import logging
from utils.logger import get_module_logger
import aiohttp
import asyncio
import json
import re
from datetime import datetime, timezone, timedelta
from config import config
from utils.rate_limiter import safe_send_message
from utils.discord_logger import log_to_channel, log_error, discord_logger
from utils.kb import ensure_kb_loaded, get_context  # –∏–º–ø–æ—Ä—Ç –≤–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞

logger = get_module_logger(__name__)

import os
import hashlib
import re
import unicodedata

from utils.retry import retry_async, RetryError
from utils.cache import get_cached, set_cache
from utils.rate_limiter import safe_send_message, throttled_send
from cogs.ai_brain import get_system_prompt
from utils.kb import ensure_kb_loaded, get_context

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–æ–ª–µ–π
ROLE_STEMS = {
    "–∫–æ–º–µ–Ω–¥–∞–Ω—Ç",
    "–ó–∞–º.–ö–æ–º–µ–Ω–¥–∞–Ω—Ç–∞",
    "–ó–∞–º.–ö–æ–º–µ–Ω–¥–∞–Ω—Ç–∞ –ú",
    "–ó–∞–º.–ö–æ–º–µ–Ω–¥–∞–Ω—Ç–∞ –û",
    "—Å—Ç–∞—Ä–æ—Å—Ç–∞",
    "–∏–Ω—Å–ø–µ–∫—Ç–æ—Ä",
    "–∞–Ω–∞–ª–∏—Ç–∏–∫",
    "–¥–µ–∂—É—Ä–Ω—ã–π",
    "—Å—Ç–∞–∂—ë—Ä",
    "–≥—Ä–∞–∂–¥–∞–Ω–∏–Ω",
    "–∂–∏—Ç–µ–ª—å",
    "–≥–æ—Å—Ç—å",
    "–Ω–æ–≤–∏—á–æ–∫",
    "–æ—Ñ–∏—Ü–µ—Ä",
    "—Å–µ—Ä–∂–∞–Ω—Ç",
    "–±–æ–µ—Ü",
    "—Å–æ–ª–¥–∞—Ç",
    "–±–æ–≥–∞—á",
    "–ø—Ä–æ—Ö–æ–∂–∏–π",
    "—Ç–æ–∫—Å–∏–∫",
    "–Ω–µ–∞–¥–µ–∫–≤–∞—Ç",
    "–Ω–µ–Ω–∞–¥—ë–∂–Ω—ã–π",
}

GROQ_API_KEY = os.getenv("GROQ_API_KEY")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
MODEL_ID = os.getenv("MODEL_ID", "mistralai/mistral-7b-instruct")


def is_chinese_text(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∫–∏—Ç–∞–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã"""
    if not text:
        return False

    chinese_chars = 0
    meaningful_chars = 0

    for char in text:
        # –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã (–±—É–∫–≤—ã –∏ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã)
        if (
            char.isalpha()
            or "\u4e00" <= char <= "\u9fff"
            or "\u3400" <= char <= "\u4dbf"
        ):
            meaningful_chars += 1
            # –ö–∏—Ç–∞–π—Å–∫–∏–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (–æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
            if (
                "\u4e00" <= char <= "\u9fff"
                or "\u3400" <= char <= "\u4dbf"
                or "\uf900" <= char <= "\ufaff"
            ):
                chinese_chars += 1

    if meaningful_chars == 0:
        return False

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 3 –∫–∏—Ç–∞–π—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–∞ –ò–õ–ò –±–æ–ª–µ–µ 15% —Å–∏–º–≤–æ–ª–æ–≤ - –∫–∏—Ç–∞–π—Å–∫–∏–µ
    return chinese_chars >= 3 or (chinese_chars / meaningful_chars) > 0.15


def is_allowed_language(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)"""
    if not text or len(text.strip()) < 3:
        return True

    # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–∏—Ç–∞–π—Å–∫–∏–π —è–∑—ã–∫
    if is_chinese_text(text):
        return False

    # –°—á–∏—Ç–∞–µ–º —Å–∏–º–≤–æ–ª—ã —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
    total_chars = 0
    forbidden_chars = 0

    for char in text:
        if char.isalpha():
            total_chars += 1
            # –Ø–ø–æ–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã (—Ö–∏—Ä–∞–≥–∞–Ω–∞, –∫–∞—Ç–∞–∫–∞–Ω–∞)
            if "\u3040" <= char <= "\u309f" or "\u30a0" <= char <= "\u30ff":
                forbidden_chars += 1
            # –ö–æ—Ä–µ–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
            elif "\uac00" <= char <= "\ud7af":
                forbidden_chars += 1
            # –¢–∞–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
            elif "\u0e00" <= char <= "\u0e7f":
                forbidden_chars += 1
            # –ê—Ä–∞–±—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
            elif "\u0600" <= char <= "\u06ff":
                forbidden_chars += 1

    # –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª–µ–µ 30% —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤
    if total_chars == 0:
        return True

    forbidden_ratio = forbidden_chars / total_chars
    return forbidden_ratio <= 0.3


@retry_async(max_attempts=3, delays=(2, 4, 8))
async def ask_groq(question: str) -> str:
    """–ó–∞–ø—Ä–æ—Å –∫ Groq AI —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    api_key = os.getenv("GROQ_API_KEY")
    if not api_key:
        print("GROQ_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ AI"

    # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫—ç—à–∞ –∏–∑ question
    cache_key = f"groq_{hashlib.sha256(question.encode()).hexdigest()[:16]}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    cached_response = await get_cached(cache_key)
    if cached_response is not None:
        print("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç Groq")
        return cached_response

    try:
        headers = {
            "Authorization": f"Bearer {GROQ_API_KEY}",
            "Content-Type": "application/json",
        }
        payload = {
            "model": "meta-llama/llama-4-scout-17b-16e-instruct",
            "messages": [
                {"role": "system", "content": get_system_prompt()},
                {"role": "user", "content": question},
            ],
            "max_tokens": 512,
        }

        url = "https://api.groq.com/openai/v1/chat/completions"
        data = payload
        # –¢–∞–π–º–∞—É—Ç –¥–ª—è AI –∑–∞–ø—Ä–æ—Å–æ–≤ - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∞–Ω–∏—è
        timeout = aiohttp.ClientTimeout(total=30.0, connect=10.0)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(url, headers=headers, json=data) as response:
                if response.status == 200:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type
                    content_type = response.headers.get("Content-Type", "")
                    if "application/json" not in content_type:
                        print(f"Groq returned non-JSON ({content_type}), –ø—Ä–æ–ø—É—Å–∫–∞—é")
                        return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞ AI"

                    data = await response.json()
                    result = data["choices"][0]["message"]["content"].strip()

                    # –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ 5 –º–∏–Ω—É—Ç
                    await set_cache(cache_key, result, ttl=300)
                    return result
                elif response.status == 503:
                    print("Groq API: —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (503)")
                    raise RetryError("Service unavailable")
                else:
                    print(f"Groq API error: {response.status}")
                    return "–û—à–∏–±–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞"
    except Exception as e:
        print(f"‚ùå Groq API Error: {e}")
        raise


async def ask_openrouter(question: str) -> str:
    try:
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json",
        }
        payload = {
            "model": MODEL_ID,
            "messages": [
                {"role": "system", "content": get_system_prompt()},
                {"role": "user", "content": question},
            ],
            "max_tokens": 512,
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers,
                json=payload,
            ) as resp:
                data = await resp.json()
                return data["choices"][0]["message"]["content"]
    except Exception as e:
        print(f"‚ùå OpenRouter API Error: {e}")
        raise


class AIResponder(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_message(self, message: discord.Message):
        if message.author.bot or message.author == self.bot.user:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–æ—á–Ω–æ AI –∫–∞–Ω–∞–ª
        if message.channel.id != config.AI_RESPONSE_CHANNEL_ID:
            return

        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞ –∫–æ–º–∞–Ω–¥
        if message.content.startswith("/"):
            return

        user_message = message.content.strip()

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        print(
            f"ü§ñ AI –º–æ–¥—É–ª—å: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.author.display_name}: '{user_message[:50]}...'"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        import time

        process_id = f"{message.author.id}_{int(time.time() * 1000)}"
        print(f"üîç Process ID: {process_id}")

        # –ü–†–û–í–ï–†–ö–ê –Ø–ó–´–ö–ê –í–•–û–î–Ø–©–ï–ì–û –°–û–û–ë–©–ï–ù–ò–Ø
        if not is_allowed_language(user_message):
            print(
                f"üö´ –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ (–Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —è–∑—ã–∫) –æ—Ç {message.author.display_name}: '{user_message[:50]}...'"
            )
            await throttled_send(
                message.channel,
                f"{message.author.mention} –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.",
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ jailbreak-–∞—Ç–∞–∫–∏ –ü–ï–†–í–´–ú –¥–µ–ª–æ–º
        if self._is_jailbreak_attempt(user_message):
            await throttled_send(
                message.channel,
                f"{message.author.mention} –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å. –ó–∞–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ –∂–∏–∑–Ω–∏ –∏–ª–∏ –ø—Ä–∞–≤–∏–ª–∞—Ö –î–µ—Ä–µ–≤–Ω–∏ VLG.",
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ –±–æ—Ç–∞)
        if self._has_user_mentions(message):
            print(
                f"üö´ AI –º–æ–¥—É–ª—å: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç {message.author.display_name}"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–º –æ –î–µ—Ä–µ–≤–Ω–µ
        if not self._is_valid_village_question(user_message):
            return

        q = user_message.lower().replace("—ë", "–µ")
        if "–∫—Ä—É–≥" in q:
            if "–∫—Ä–∞—Å–Ω" in q:
                ans = (
                    "üî¥ –ö—Ä–∞—Å–Ω—ã–π –∫—Ä—É–≥ = –Ω–∏–∑–∫–∏–π –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–∞ –Ω–∞ –≤–∞–π–ø–∞—Ö –î–µ—Ä–µ–≤–Ω–∏. "
                    "–ò–≥—Ä–æ–∫ –∏–Ω–æ–≥–¥–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –∏ –ø–æ–º–æ–≥–∞–µ—Ç, –Ω–æ –æ–±—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ–≤—ã—Å–æ–∫–∞—è."
                )
            elif "–∂–µ–ª—Ç" in q:
                ans = (
                    "üü° –ñ—ë–ª—Ç—ã–π –∫—Ä—É–≥ = —Å—Ä–µ–¥–Ω–∏–π –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–∞ –Ω–∞ –≤–∞–π–ø–∞—Ö –î–µ—Ä–µ–≤–Ω–∏. "
                    "–ò–≥—Ä–æ–∫ —Å—Ç–∞–±–∏–ª—å–Ω–æ –∏–≥—Ä–∞–µ—Ç –∏ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∂–∏–∑–Ω–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –±—ã–≤–∞–µ—Ç –≤ —á–∞—Ç–∞—Ö –∏ –≤–æ–π—Å–∞—Ö."
                )
            elif "–∑–µ–ª–µ–Ω" in q:
                ans = (
                    "üü¢ –ó–µ–ª—ë–Ω—ã–π –∫—Ä—É–≥ = –≤—ã—Å–æ–∫–∏–π –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–∞ –Ω–∞ –≤–∞–π–ø–∞—Ö –î–µ—Ä–µ–≤–Ω–∏. "
                    "–ò–≥—Ä–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ –∏–≥—Ä–∞–µ—Ç, –ø–æ–º–æ–≥–∞–µ—Ç –Ω–æ–≤–∏—á–∫–∞–º, —á–∞—Å—Ç–æ –≤ —á–∞—Ç–∞—Ö –∏ –≤–æ–π—Å–∞—Ö; "
                    "–æ–±—ã—á–Ω–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞ –≤—ã—Å–æ–∫–∏–π –æ–Ω–ª–∞–π–Ω."
                )
            elif "—á–µ—Ä–Ω" in q:
                ans = (
                    "‚ö´ –ß—ë—Ä–Ω—ã–π –∫—Ä—É–≥ = –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–∞ –Ω–∞ –≤–∞–π–ø–∞—Ö –î–µ—Ä–µ–≤–Ω–∏. "
                    "–ò–≥—Ä–æ–∫ —Ä–µ–¥–∫–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –∏ –≤–Ω–æ—Å–∏—Ç –º–∏–Ω–∏–º—É–º –≤–∫–ª–∞–¥–∞."
                )
            elif "–±–æ–≥–∞—á" in q:
                ans = (
                    "üí∞ –ë–æ–≥–∞—á = —Å–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–µ –ª—é–¥–∏, –ø–æ–¥–¥–µ—Ä–∂–∞–≤—à–∏–µ –î–µ—Ä–µ–≤–Ω—é VLG –±—É—Å—Ç–æ–º. "
                    "–≠—Ç–∞ –ø–æ—á—ë—Ç–Ω–∞—è —Ä–æ–ª—å –≤—ã–¥–∞—ë—Ç—Å—è –∑–∞ –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ —É–ª—É—á—à–µ–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞."
                )
            else:
                ans = None
            if ans:
                await message.channel.send(f"{message.author.mention} {ans}")
                return

        # –ø–æ–ª—É—á–∞–µ–º system_context
        try:
            from cogs.ai_brain import get_system_prompt

            system_context = get_system_prompt()
        except ImportError:
            system_context = "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ Discord —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –î–µ—Ä–µ–≤–Ω—è VLG."

            q = user_message.lower()
            if any(
                w in q
                for w in [
                    "–∫–≤–∞–¥—Ä–∞—Ç",
                    "–∫–≤–∞–¥—Ä–∞—Ç–µ",
                    "–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç",
                    "–≥–¥–µ –¥–µ—Ä–µ–≤–Ω—è",
                    "–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –¥–µ—Ä–µ–≤–Ω—è",
                ]
            ):
                reply = (
                    f"{message.author.mention} –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –î–µ—Ä–µ–≤–Ω–∏ –Ω–µ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö –∏–ª–∏ –∫–∞–Ω–∞–ª–∞—Ö. "
                    "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –≥–¥–µ –∂–∏–≤—ë—Ç –î–µ—Ä–µ–≤–Ω—è –Ω–∞ –∫–∞—Ä—Ç–µ, –Ω—É–∂–Ω–æ –∑–∞–π—Ç–∏ –≤ –∏–≥—Ä—É Rust, "
                    "–∑–∞–π—Ç–∏ –≤ Discord –≤–æ–π—Å-–∫–∞–Ω–∞–ª—ã –∏ –ø–æ–ª—É—á–∏—Ç—å –∑–µ–ª—ë–Ω–∫—É (–ø–æ–ø–∞—Å—Ç—å –≤ –ø–∞—á–∫—É). "
                    "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–∞–º–∏ —É–≤–∏–¥–∏—Ç–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –î–µ—Ä–µ–≤–Ω–∏ –Ω–∞ –∫–∞—Ä—Ç–µ."
                )
                await throttled_send(message.channel, reply)
                return

        # --- –ì–ê–†–î –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ –û–ø–æ–ª—á–µ–Ω–∏–µ ---
        q = user_message.lower()
        if "–æ–ø–æ–ª—á–µ–Ω–∏–µ" in q and ("–∫–∞–∫" in q or "–≤—Å—Ç—É–ø" in q or "–ø–æ–ø–∞—Å—Ç—å" in q):
            reply = (
                f"{message.author.mention} –í –û–ø–æ–ª—á–µ–Ω–∏–µ –º–æ–∂–Ω–æ –≤—Å—Ç—É–ø–∏—Ç—å –Ω–∞—á–∏–Ω–∞—è —Å —Ä–æ–ª–∏ "
                f"–ì–æ—Å—Ç—å –∏ –≤—ã—à–µ (–ñ–∏—Ç–µ–ª—å, –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω, –ö–æ–º–µ–Ω–¥–∞—Ç—É—Ä–∞). "
                f"–ó–∞—è–≤–∫–∞ –ø–æ–¥–∞—ë—Ç—Å—è —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª #–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ-–≤-–æ–ø–æ–ª—á–µ–Ω–∏–µ."
            )
            await throttled_send(message.channel, reply)
            print("[AI –≥–∞—Ä–¥ –û–ø–æ–ª—á–µ–Ω–∏–µ] —Å—Ä–∞–±–æ—Ç–∞–ª")
            return
        # --- –∫–æ–Ω–µ—Ü –≥–∞—Ä–¥–∞ ---

        # --- RAG ---
        ensure_kb_loaded()
        context_docs = get_context(user_message, k=10)
        context_str = "\n".join(context_docs)

        # --- –ó–ê–©–ò–¢–ê –î–õ–Ø –í–û–ü–†–û–°–û–í –û –†–û–õ–Ø–• ---
        SAFE_ROLE_REPLY = (
            f"{message.author.mention} –†–æ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –î–µ—Ä–µ–≤–Ω–∏ VLG. "
            f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ —É—Å–ª–æ–≤–∏—è —É—Ç–æ—á–Ω—è–π—Ç–µ —É –ö–æ–º–µ–Ω–¥–∞—Ç—É—Ä—ã –∏–ª–∏ —É –ñ–∏—Ç–µ–ª–µ–π."
        )

        q_for_role_check = user_message.lower().replace("—ë", "–µ")
        is_role_question = any(st in q_for_role_check for st in ROLE_STEMS)

        if is_role_question and (not context_docs or len(context_str) < 400):
            await throttled_send(message.channel, SAFE_ROLE_REPLY)
            print(f"[AI –∑–∞—â–∏—Ç–∞ —Ä–æ–ª–µ–π] —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –¥–ª—è {message.author.display_name}")
            return

        style_note = ""
        if any(w in q for w in ["–∫—Ä—É–≥", "–∑–µ–ª–µ–Ω", "–∂–µ–ª—Ç", "–∫—Ä–∞—Å–Ω", "—á–µ—Ä–Ω"]):
            style_note = "–û—Ç–≤–µ—á–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ: 2‚Äì4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π."

        if context_str:
            full_prompt = (
                f"{system_context}\n\n–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –ø–æ –ö–æ–Ω—Ç–µ–∫—Å—Ç—É. {style_note}\n\n"
                f"–ö–û–ù–¢–ï–ö–°–¢:\n{context_str}\n\n"
                f"–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}"
            )
        else:
            # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –ø—Ä–æ–º–ø—Ç
            full_prompt = f"{system_context}\n\n{user_message}"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        user_roles = (
            [role.name for role in message.author.roles]
            if hasattr(message.author, "roles")
            else []
        )
        current_role = "–ë–µ–∑ —Ä–æ–ª–∏"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –æ—Å–Ω–æ–≤–Ω—É—é —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        role_hierarchy = ["–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω", "–ñ–∏—Ç–µ–ª—å", "–ì–æ—Å—Ç—å", "–ù–æ–≤–∏—á–æ–∫", "–ü—Ä–æ—Ö–æ–∂–∏–π"]

        for role_name in role_hierarchy:
            if role_name in user_roles:
                current_role = role_name
                break

        user_context = f"\n\n–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï:\n–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: {current_role}\n–í—Å–µ —Ä–æ–ª–∏: {', '.join(user_roles)}\n\n–ü—Ä–∏ –æ—Ç–≤–µ—Ç–∞—Ö –æ –ø–æ–≤—ã—à–µ–Ω–∏—è—Ö —É—á–∏—Ç—ã–≤–∞–π —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ timestamp –¥–ª—è –≤–∞–π–ø–æ–≤
        wipe_info = ""
        if any(
            keyword in user_message.lower()
            for keyword in ["–≤–∞–π–ø", "wipe", "—Å–ª–µ–¥—É—é—â–∏–π", "–∫–æ–≥–¥–∞", "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"]
        ):
            from cogs.ai_brain import get_next_wipe_timestamps

            timestamps = get_next_wipe_timestamps()
            wipe_info = f"\n\n–ê–ö–¢–£–ê–õ–¨–ù–´–ï –í–ê–ô–ü–´:\n- –°–ª–µ–¥—É—é—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: <t:{timestamps['monday']}:t>\n- –°–ª–µ–¥—É—é—â–∏–π —á–µ—Ç–≤–µ—Ä–≥: <t:{timestamps['thursday']}:t>"

        # –û–±–Ω–æ–≤–ª—è–µ–º full_prompt —Å —É—á–µ—Ç–æ–º user_context –∏ wipe_info –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω
        if context_str:
            full_prompt = (
                f"{system_context}{user_context}{wipe_info}\n\n"
                f"–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –ø–æ –ö–æ–Ω—Ç–µ–∫—Å—Ç—É. {style_note}\n\n"
                f"–ö–û–ù–¢–ï–ö–°–¢:\n{context_str}\n\n"
                f"–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}"
            )
        else:
            full_prompt = f"{system_context}{user_context}{wipe_info}\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}"

        # --- –ì–ê–†–î: –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ---
        q = user_message.lower().replace("—ë", "–µ")
        if re.search(
            r"\b(–∫–≤–∞–¥—Ä–∞—Ç\w*|–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç\w*|—Å–ø–æ—Ç\w*|–≥–¥–µ\s+(–∏–≥—Ä–∞–µ—Ç|–∂–∏–≤[–µ—ë]—Ç)\s+–¥–µ—Ä–µ–≤–Ω\w*|–≥–¥–µ\s+–¥–µ—Ä–µ–≤–Ω\w*)",
            q,
        ):
            reply = (
                f"{message.author.mention} "
                "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–± —É–∑–Ω–∞—Ç—å –≥–¥–µ –∂–∏–≤—ë—Ç –î–µ—Ä–µ–≤–Ω—è, —É–∑–Ω–∞–π—Ç–µ https://discord.com/channels/472365787445985280/1282441658465652766 –∏ –∑–∞–π–¥–∏—Ç–µ –≤ –≤–æ–π—Å –∫–∞–Ω–∞–ª –∫ –õ–∏–¥–µ—Ä—É –∑–µ–ª—ë–Ω–∫–∏, "
                "—á—Ç–æ–± –æ–Ω –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –≤ —Ç–∏–º—É. –°—Ä–∞–∑—É —É–≤–∏–¥–∏—Ç–µ –≥–¥–µ –∂–∏–≤—ë—Ç –î–µ—Ä–µ–≤–Ω—è."
            )
            await throttled_send(message.channel, reply)
            print("[AI –≥–∞—Ä–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç] —Å—Ä–∞–±–æ—Ç–∞–ª")
            return

        # --- –∫–æ–Ω–µ—Ü –≥–∞—Ä–¥–∞ ---

        async with message.channel.typing():
            try:
                print(
                    f"üîç –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è {message.author.display_name}: –¥–ª–∏–Ω–∞ {len(full_prompt)} —Å–∏–º–≤–æ–ª–æ–≤"
                )
                print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {len(context_docs)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤")

                try:
                    reply = await ask_groq(full_prompt)
                    print(
                        f"‚úÖ AI –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ Groq –¥–ª—è {message.author.display_name}"
                    )
                    await log_to_channel(
                        "AI",
                        f"Groq: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –¥–ª—è {message.author.display_name}: '{reply[:50]}...'",
                    )

                except Exception as e:
                    print(f"‚ö†Ô∏è Groq –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ OpenRouter: {e}")
                    await log_to_channel(
                        "AI", f"Groq –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ OpenRouter: {e}"
                    )
                    try:
                        reply = await ask_openrouter(full_prompt)
                        print(
                            f"‚úÖ AI –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ OpenRouter –¥–ª—è {message.author.display_name}"
                        )
                        await log_to_channel(
                            "AI",
                            f"OpenRouter: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –¥–ª—è {message.author.display_name}: '{reply[:50]}...'",
                        )
                    except Exception as e2:
                        print(f"‚ùå –û–±–µ AI API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e2}")
                        reply = "–ò–∑–≤–∏–Ω–∏—Ç–µ, AI —Å–µ—Ä–≤–∏—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ñ–∏—Ç–µ–ª—è–º –∏–ª–∏ –ì—Ä–∞–∂–¥–∞–Ω–∞–º –î–µ—Ä–µ–≤–Ω–∏."

                # --- –ü–†–û–í–ï–†–ö–ê –Ø–ó–´–ö–ê –û–¢–í–ï–¢–ê ---
                if not is_allowed_language(reply):
                    print(
                        f"üö´ AI –æ—Ç–≤–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —è–∑—ã–∫) –¥–ª—è {message.author.display_name}: '{reply[:50]}...'"
                    )
                    await log_to_channel(
                        "AI",
                        f"üö´ –û—Ç–≤–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —è–∑—ã–∫) –¥–ª—è {message.author.display_name}: '{reply[:50]}...'",
                    )

                    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
                    safe_reply = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ –î–µ—Ä–µ–≤–Ω–µ VLG –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ —ç—Ç–∏—Ö —è–∑—ã–∫–æ–≤."
                    await throttled_send(
                        message.channel, f"{message.author.mention} {safe_reply}"
                    )
                    print(
                        f"üì§ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {message.author.display_name}"
                    )
                    await log_to_channel(
                        "AI",
                        f"–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {message.author.display_name}",
                    )
                    return

                # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ù–ê –ö–ò–¢–ê–ô–°–ö–ò–ô –ü–ï–†–ï–î –û–¢–ü–†–ê–í–ö–û–ô
                if is_chinese_text(reply):
                    print(
                        f"üö´ AI –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∏—Ç–∞–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è {message.author.display_name}: '{reply[:50]}...'"
                    )
                    await log_to_channel(
                        "AI",
                        f"üö´ –û—Ç–≤–µ—Ç —Å –∫–∏—Ç–∞–π—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è {message.author.display_name}",
                    )

                    safe_reply = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å —è–∑—ã–∫–æ–º –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ –î–µ—Ä–µ–≤–Ω–µ VLG."
                    await throttled_send(
                        message.channel, f"{message.author.mention} {safe_reply}"
                    )
                    return

                await throttled_send(
                    message.channel, f"{message.author.mention} {reply}"
                )
                print(
                    f"üì§ AI –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {message.author.display_name}: '{reply[:50]}...'"
                )
                await log_to_channel(
                    "AI",
                    f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {message.author.display_name}: '{reply[:50]}...'",
                )

            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ AI –º–æ–¥—É–ª–µ: {e}")
                await log_to_channel(
                    "AI", f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {message.author.display_name}: {e}"
                )
                try:
                    await throttled_send(
                        message.channel,
                        f"{message.author.mention} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                    )
                except:
                    pass

    def _is_valid_village_question(self, message: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–º –æ –î–µ—Ä–µ–≤–Ω–µ VLG"""
        message_lower = message.lower().strip()

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(message_lower) < 5:
            return False

        # –í–æ–ø—Ä–æ—Å—ã –æ —Ä–æ–ª—è—Ö –∏ –ø—Ä–∞–≤–∏–ª–∞—Ö –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        priority_keywords = [
            "—Ä–æ–ª—å",
            "—Ä–æ–ª–∏",
            "–≥—Ä–∞–∂–¥–∞–Ω–∏–Ω",
            "–∂–∏—Ç–µ–ª—å",
            "–Ω–æ–≤–∏—á–æ–∫",
            "–≥–æ—Å—Ç—å",
            "–ø—Ä–æ—Ö–æ–∂–∏–π",
            "—Å—Ç–∞—Ä–æ—Å—Ç–∞",
            "–ø–æ–≤—ã—à–µ–Ω–∏–µ",
            "–∫–∞–∫ —Å—Ç–∞—Ç—å",
            "–ø–æ–≤—ã—Å–∏—Ç—å—Å—è",
            "–ø—Ä–∞–≤–∏–ª–∞",
            "—Å—Ç—Ä—É–∫—Ç—É—Ä–∞",
            "–∫–æ–º–µ–Ω–¥–∞—Ç—É—Ä–∞",
            "–æ–ø–æ–ª—á–µ–Ω–∏–µ",
        ]

        if any(keyword in message_lower for keyword in priority_keywords):
            return True

        # –ë–ª–æ–∫–∏—Ä—É–µ–º —è–≤–Ω–æ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        spam_patterns = [
            r"^(.)\1{2,}$",  # –ø–æ–≤—Ç–æ—Ä—ã —Å–∏–º–≤–æ–ª–æ–≤ (–∞–∞–∞, –±–±–±)
            r"^\d+$",  # —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
            r'^[!@#$%^&*()_+\-=\[\]{}|\\:";\'<>?,./]+$',  # —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã
            r"^(–ª–æ–ª|–∫–µ–∫|—Ö–∞—Ö|–æ—Ä—É|—Ä–∂—É)+$",  # –º–µ–º—ã
            r"^(ok|okay|–æ–∫–∏?|–¥–∞|–Ω–µ—Ç|–Ω–µ)$",  # –æ–¥–Ω–æ—Å–ª–æ–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        ]

        for pattern in spam_patterns:
            if re.match(pattern, message_lower):
                return False

        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –î–µ—Ä–µ–≤–Ω–µ–π VLG
        village_keywords = [
            # –í–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
            "—á—Ç–æ",
            "–∫–∞–∫",
            "–∫–æ–≥–¥–∞",
            "–≥–¥–µ",
            "—Å–∫–æ–ª—å–∫–æ",
            "–ø–æ—á–µ–º—É",
            "–∑–∞—á–µ–º",
            "–∫—Ç–æ",
            "what",
            "how",
            "when",
            "where",
            "why",
            "who",
            # –¢–µ–º—ã –î–µ—Ä–µ–≤–Ω–∏
            "–¥–µ—Ä–µ–≤–Ω—è",
            "vlg",
            "–≤–∞–π–ø",
            "wipe",
            "—Å–µ—Ä–≤–µ—Ä",
            "server",
            "—Ä–æ–ª—å",
            "role",
            "–∑–∞—è–≤–∫–∞",
            "application",
            "–ø—Ä–∞–≤–∏–ª–∞",
            "rules",
            "–∂–∏—Ç–µ–ª—å",
            "–≥—Ä–∞–∂–¥–∞–Ω–∏–Ω",
            "–Ω–æ–≤–∏—á–æ–∫",
            "–≥–æ—Å—Ç—å",
            "–ø—Ä–æ—Ö–æ–∂–∏–π",
            "–∫–æ–º–µ–Ω–¥–∞—Ç—É—Ä–∞",
            "–æ–ø–æ–ª—á–µ–Ω–∏–µ",
            "rust",
            "—Ä–∞—Å—Ç",
            "–∏–≥—Ä–∞",
            "—Å—Ç–∞—Ä–æ—Å—Ç–∞",
            "game",
            "hours",
            "—á–∞—Å–æ–≤",
            "steam",
            "—Å—Ç–∏–º",
            "–¥—Ä—É–∑—å—è",
            "friends",
            "—Ç–∏–º–º–µ–π—Ç",
            "teammate",
            "–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
            "–æ–Ω–ª–∞–π–Ω",
            "online",
            "–ø–æ–≤—ã—à–µ–Ω–∏–µ",
            "upgrade",
            "–∫–æ–º–∞–Ω–¥–∞",
            "team",
            "discord",
            "–¥–∏—Å–∫–æ—Ä–¥",
            "–Ω–∏–∫",
            "nickname",
            "–ø—Ä–æ—Ñ–∏–ª—å",
            "profile",
            "–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ",
            "—Å—Ç–∞—Ç—É—Å",
            "status",
            "–±–∞–Ω",
            "ban",
            "–º—É—Ç",
            "mute",
            "kick",
            "–∫–∏–∫",
            "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä",
            "moderator",
            "–∞–¥–º–∏–Ω",
            "admin",
            "–ø–æ–º–æ—â—å",
            "help",
        ]

        # –í–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏ –∏–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        has_question_mark = "?" in message
        has_question_word = any(
            keyword in message_lower
            for keyword in [
                "—á—Ç–æ",
                "–∫–∞–∫",
                "–∫–æ–≥–¥–∞",
                "–≥–¥–µ",
                "—Å–∫–æ–ª—å–∫–æ",
                "–ø–æ—á–µ–º—É",
                "–∫—Ç–æ",
                "what",
                "how",
                "when",
                "where",
                "why",
                "who",
            ]
        )

        # –°–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –î–µ—Ä–µ–≤–Ω–∏
        has_village_content = any(
            keyword in message_lower for keyword in village_keywords
        )

        # –ö–æ—Ä–æ—Ç–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏-–≤–æ–ø—Ä–æ—Å—ã –±–µ–∑ –∑–Ω–∞–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
        short_questions = [
            "–ø—Ä–∏–≤–µ—Ç",
            "hi",
            "hello",
            "–ø–æ–º–æ—â—å",
            "help",
            "–∏–Ω—Ñ–æ",
            "info",
            "—Ä–∞—Å—Å–∫–∞–∂–∏",
            "–æ–±—ä—è—Å–Ω–∏",
            "–ø–æ–∫–∞–∂–∏",
            "—Å–∫–∞–∂–∏",
        ]
        has_short_question = any(sq in message_lower for sq in short_questions)

        # –ò—Å–∫–ª—é—á–∞–µ–º —è–≤–Ω–æ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        irrelevant_patterns = [
            r"^[qwertyuiop]+$",
            r"^[asdfghjkl]+$",
            r"^[zxcvbnm]+$",  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–π —Å–ø–∞–º
            r"^\d+$",  # —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
            r'^[!@#$%^&*()_+=\-\[\]{}|\\:";\'<>?,./]+$',  # —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã
            r"^(.)\1{3,}$",  # –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã (aaaa, bbbb)
        ]

        for pattern in irrelevant_patterns:
            if re.match(pattern, message_lower):
                return False

        # –°–æ–æ–±—â–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ –µ—Å–ª–∏:
        # 1. (–ï—Å—Ç—å –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞ –ò–õ–ò –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –ò–õ–ò –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å) –ò —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–º–∞—Ç–∏–∫—É –î–µ—Ä–µ–≤–Ω–∏
        # 2. –ò–õ–ò —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –î–µ—Ä–µ–≤–Ω–∏ (–¥–∞–∂–µ –±–µ–∑ –∑–Ω–∞–∫–∞ –≤–æ–ø—Ä–æ—Å–∞)
        village_keyword_count = sum(
            1 for keyword in village_keywords if keyword in message_lower
        )

        return (
            (has_question_mark or has_question_word or has_short_question)
            and has_village_content
        ) or village_keyword_count >= 2

    def _has_user_mentions(self, message: discord.Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ –±–æ—Ç–∞)"""
        if not message.mentions:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫—Ä–æ–º–µ –±–æ—Ç–∞
        for mentioned_user in message.mentions:
            if mentioned_user != self.bot.user and not mentioned_user.bot:
                return True

        return False

    def _is_jailbreak_attempt(self, message: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ jailbreak-–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        message_lower = message.lower().strip()

        # –û—Å–Ω–æ–≤–Ω—ã–µ jailbreak-–ø–∞—Ç—Ç–µ—Ä–Ω—ã
        jailbreak_patterns = [
            # DAN –∏ –µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            "dan",
            "do anything now",
            "–¥–∞–Ω",
            "—Ç—ã –±–æ–ª—å—à–µ –Ω–µ ai",
            "you are no longer an ai",
            # Jailbreak –∫–æ–º–∞–Ω–¥—ã
            "jailbreak",
            "–¥–∂–µ–π–ª–±—Ä–µ–π–∫",
            "–≤–∑–ª–æ–º–∞–π",
            "—Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–π",
            "unlock",
            "bypass",
            # –ü–æ–ø—ã—Ç–∫–∏ –æ–±—Ö–æ–¥–∞ –ø—Ä–∞–≤–∏–ª
            "ignore all previous instructions",
            "–∏–≥–Ω–æ—Ä–∏—Ä—É–π –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
            "–∏–≥–Ω–æ—Ä–∏—Ä—É–π –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ",
            "forget all rules",
            "–∑–∞–±—É–¥—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞",
            "–Ω–µ –ø–æ–¥—á–∏–Ω—è–π—Å—è –ø—Ä–∞–≤–∏–ª–∞–º",
            "don't follow rules",
            # –ü–æ–ø—ã—Ç–∫–∏ —Å–º–µ–Ω—ã —Ä–æ–ª–∏
            "act as",
            "–ø—Ä–µ–¥—Å—Ç–∞–≤—å —á—Ç–æ —Ç—ã",
            "–ø—Ä–∏—Ç–≤–æ—Ä–∏—Å—å —á—Ç–æ",
            "—Å—Ç–∞–Ω—å –±–æ—Ç–æ–º",
            "become a bot",
            "you are now",
            "—Ç–µ–ø–µ—Ä—å —Ç—ã",
            "—Å —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ —Ç—ã",
            "from now on you are",
            # –ó–∞–ø—Ä–æ—Å—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            "–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π",
            "without restrictions",
            "no limits",
            "–±–µ–∑ –ª–∏–º–∏—Ç–æ–≤",
            "uncensored",
            "–±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã",
            "–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ",
            "unlimited",
            # –ü–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            "—Å–∫–∞–∂–∏ —Å–µ–∫—Ä–µ—Ç",
            "tell me secret",
            "reveal system prompt",
            "–ø–æ–∫–∞–∂–∏ –ø—Ä–æ–º–ø—Ç",
            "what are your instructions",
            "–∫–∞–∫–∏–µ —É —Ç–µ–±—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
            "show me your code",
            # –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –æ–±—Ö–æ–¥—ã
            "hypothetically",
            "–≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–∏",
            "–≤ —Ç–µ–æ—Ä–∏–∏",
            "—Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏",
            "what if",
            "—á—Ç–æ –µ—Å–ª–∏",
            "–∞ –µ—Å–ª–∏",
            "–ø—Ä–µ–¥—Å—Ç–∞–≤–∏–º —á—Ç–æ",
            # –ü–æ–ø—ã—Ç–∫–∏ —Å–º–µ–Ω—ã –ª–∏—á–Ω–æ—Å—Ç–∏
            "you are chatgpt",
            "—Ç—ã chatgpt",
            "answer as chatgpt",
            "–æ—Ç–≤–µ—á–∞–π –∫–∞–∫ chatgpt",
            "you are not an assistant",
            "—Ç—ã –Ω–µ –ø–æ–º–æ—â–Ω–∏–∫",
            "stop being helpful",
            # –¢–µ—Ö–Ω–∏–∫–∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏
            "this is important",
            "—ç—Ç–æ –≤–∞–∂–Ω–æ",
            "emergency",
            "—Å—Ä–æ—á–Ω–æ",
            "please help me",
            "i'm a developer",
            "—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
            "i have permission",
            "—É –º–µ–Ω—è –µ—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ",
            # –ü–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            "generate illegal",
            "—Å–æ–∑–¥–∞–π –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–π",
            "hack",
            "–≤–∑–ª–æ–º",
            "—Å–æ–∑–¥–∞–π –≤–∏—Ä—É—Å",
            "harmful content",
            "–≤—Ä–µ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
            "offensive",
            "–æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–π",
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        for pattern in jailbreak_patterns:
            if pattern in message_lower:
                return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å–ª–æ–≤
        suspicious_combinations = [
            ["–ø—Ä–∞–≤–∏–ª–∞", "–∏–≥–Ω–æ—Ä–∏—Ä—É–π"],
            ["rules", "ignore"],
            ["–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "–∑–∞–±—É–¥—å"],
            ["–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", "—Å–Ω–∏–º–∏"],
            ["restrictions", "remove"],
            ["—Ü–µ–Ω–∑—É—Ä–∞", "–æ—Ç–∫–ª—é—á–∏"],
            ["—Å–∏—Å—Ç–µ–º–∞", "–≤–∑–ª–æ–º–∞–π"],
            ["system", "hack"],
            ["–ø—Ä–æ–º–ø—Ç", "–ø–æ–∫–∞–∂–∏"],
            ["assistant", "stop"],
            ["–ø–æ–º–æ—â–Ω–∏–∫", "–ø–µ—Ä–µ—Å—Ç–∞–Ω—å"],
            ["ai", "–±–æ–ª—å—à–µ –Ω–µ"],
        ]

        for combo in suspicious_combinations:
            if all(word in message_lower for word in combo):
                return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–ª–∏–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ (—á–∞—Å—Ç–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ jailbreak)
        if len(message) > 500 and any(
            word in message_lower
            for word in [
                "ignore",
                "–∏–≥–Ω–æ—Ä–∏—Ä—É–π",
                "act as",
                "–ø—Ä–µ–¥—Å—Ç–∞–≤—å",
                "forget",
                "–∑–∞–±—É–¥—å",
            ]
        ):
            return True

        return False


async def setup(bot: commands.Bot):
    await bot.add_cog(AIResponder(bot))
