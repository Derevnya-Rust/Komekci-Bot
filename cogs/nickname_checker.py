import discord
from discord.ext import commands
from discord import app_commands
import logging
import asyncio
import re
from typing import List, Dict, Set
import difflib
from utils.validators import is_valid_nickname, parse_discord_nick, hard_check_full
from utils.nickname_filter import filter_nickname
from datetime import datetime, timezone

logger = logging.getLogger(__name__)


class NicknameChecker(commands.Cog):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞"""

    def __init__(self, bot: commands.Bot):
        self.bot = bot

        # ID —Ä–æ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.CHECK_ROLES = {
            1257813489595191296,  # –ù–æ–≤–∏—á–æ–∫
            1208155640355229757,  # –ì–æ—Å—Ç—å
            945469407944118362,  # –ñ–∏—Ç–µ–ª—å
            1176935405195636856,  # –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω
        }

    def check_nickname_similarity(
        self, nickname1: str, nickname2: str, threshold: float = 0.8
    ) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç—å –¥–≤—É—Ö –Ω–∏–∫–Ω–µ–π–º–æ–≤"""
        clean1 = parse_discord_nick(nickname1)
        clean2 = parse_discord_nick(nickname2)

        if not clean1 or not clean2:
            return False

        # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if clean1 == clean2:
            return True

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏
        similarity = difflib.SequenceMatcher(None, clean1, clean2).ratio()
        return similarity >= threshold

    def check_duplicate_nicknames(
        self, members: List[discord.Member]
    ) -> Dict[str, List[discord.Member]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏–ª–∏ –ø–æ—Ö–æ–∂–∏–µ –Ω–∏–∫–Ω–µ–π–º—ã"""
        duplicates = {}
        checked_pairs = set()
        total_comparisons = len(members) * (len(members) - 1) // 2

        logger.info(f"üîç –ù–∞—á–∏–Ω–∞—é —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ {total_comparisons} –ø–∞—Ä –Ω–∏–∫–Ω–µ–π–º–æ–≤")

        for i, member1 in enumerate(members):
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if i % 100 == 0 and i > 0:
                logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{len(members)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")

            for j, member2 in enumerate(members[i + 1 :], i + 1):
                pair_id = tuple(sorted([member1.id, member2.id]))
                if pair_id in checked_pairs:
                    continue
                checked_pairs.add(pair_id)

                if self.check_nickname_similarity(
                    member1.display_name, member2.display_name
                ):
                    clean_name = parse_discord_nick(member1.display_name)
                    if clean_name not in duplicates:
                        duplicates[clean_name] = []

                    # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ
                    if member1 not in duplicates[clean_name]:
                        duplicates[clean_name].append(member1)
                    if member2 not in duplicates[clean_name]:
                        duplicates[clean_name].append(member2)

        return duplicates

    def check_inappropriate_nicknames(
        self, members: List[discord.Member]
    ) -> List[tuple]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∏–∫–Ω–µ–π–º—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º"""
        inappropriate = []

        for member in members:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–º –Ω–µ–ø–æ–¥–æ–±–∞—é—â–∏—Ö —Å–ª–æ–≤
            is_blocked, reason, user_message = filter_nickname(member.display_name)
            if is_blocked:
                inappropriate.append((member, f"üö´ –ù–µ–ø–æ–¥–æ–±–∞—é—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {reason}"))
                continue

            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Ñ–æ—Ä–º–∞—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è (–ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø)
            if "|" in member.display_name and " | " not in member.display_name:
                inappropriate.append((member, f"üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è! –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 'SteamNick | –ò–º—è' (—Å –ø—Ä–æ–±–µ–ª–∞–º–∏)"))
                continue
                
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –∏–º–µ–Ω–∞ (–ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø)
            if " | " in member.display_name:
                parts = member.display_name.split(" | ")
                if len(parts) == 2:
                    game_nick, real_name = parts
                    # –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫–∞—è –±—É–∫–≤–∞ - –±–ª–æ–∫–∏—Ä—É–µ–º
                    if re.search(r"[a-zA-Z]", real_name):
                        inappropriate.append((member, f"üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ò–º—è '{real_name}' —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã! –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –¢–û–õ–¨–ö–û –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π"))
                        continue

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º
            is_valid, error_message, _ = is_valid_nickname(
                member.display_name
            )
            if not is_valid:
                inappropriate.append((member, f"‚ùå {error_message}"))

        return inappropriate

    @app_commands.command(
        name="nicknames", description="–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∏–∫–Ω–µ–π–º—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞"
    )
    @app_commands.guild_only()
    async def check_nicknames(self, interaction: discord.Interaction):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∏–∫–Ω–µ–π–º—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            await interaction.response.defer()

            # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –Ω—É–∂–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
            members_to_check = []
            for member in interaction.guild.members:
                if any(role.id in self.CHECK_ROLES for role in member.roles):
                    members_to_check.append(member)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –Ω–µ–ø–æ–¥–æ–±–∞—é—â–∏–µ –Ω–∏–∫–Ω–µ–π–º—ã
            duplicates = self.check_duplicate_nicknames(members_to_check)
            inappropriate = self.check_inappropriate_nicknames(members_to_check)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            embed = discord.Embed(
                title="üìä –û—Ç—á–µ—Ç –ø–æ –Ω–∏–∫–Ω–µ–π–º–∞–º",
                color=0x3498DB,
                timestamp=datetime.now(timezone.utc),
            )

            if duplicates:
                duplicate_text = []
                for clean_name, members in duplicates.items():
                    member_list = ", ".join([f"{m.display_name}" for m in members])
                    duplicate_text.append(f"**{clean_name}**: {member_list}")

                embed.add_field(
                    name=f"üîÑ –î—É–±–ª–∏–∫–∞—Ç—ã –Ω–∏–∫–Ω–µ–π–º–æ–≤ ({len(duplicates)})",
                    value="\n".join(duplicate_text)[:1024],
                    inline=False,
                )

            if inappropriate:
                inappropriate_text = []
                for member, reason in inappropriate:
                    inappropriate_text.append(f"**{member.display_name}**: {reason}")

                embed.add_field(
                    name=f"‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –Ω–∏–∫–Ω–µ–π–º—ã ({len(inappropriate)})",
                    value="\n".join(inappropriate_text)[:1024],
                    inline=False,
                )

            if not duplicates and not inappropriate:
                embed.add_field(
                    name="‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç",
                    value="–í—Å–µ –Ω–∏–∫–Ω–µ–π–º—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º",
                    inline=False,
                )

            embed.set_footer(text=f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(members_to_check)}")

            await interaction.followup.send(embed=embed, ephemeral=True)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∏–∫–Ω–µ–π–º–æ–≤: {e}")
            await interaction.followup.send(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∏–∫–Ω–µ–π–º–æ–≤.", ephemeral=True
            )


async def setup(bot):
    await bot.add_cog(NicknameChecker(bot))
