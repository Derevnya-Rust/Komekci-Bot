import os
import aiohttp
import datetime
import asyncio
import time
import re
from typing import Dict, Optional, List
import logging
from utils.logger import get_module_logger

from utils.retry import retry_async, RetryError
from utils.cache import get_cached, set_cache
from config import config
from utils.discord_logger import log_to_channel, log_error, discord_logger

logger = get_module_logger(__name__)

async def get_steamid64_from_url(steam_url: str) -> Optional[str]:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Steam URL –≤ SteamID64
    –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ /id/username, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ResolveVanityURL
    –ï—Å–ª–∏ —É–∂–µ steamid64, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–ø—Ä—è–º—É—é
    """
    try:
        if not steam_url or "steamcommunity.com" not in steam_url:
            return None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ URL
        from handlers.novichok import extract_steam_id_from_url
        steam_id = extract_steam_id_from_url(steam_url)
        
        if not steam_id:
            return None
        
        # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ SteamID64 (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –¥–ª–∏–Ω–∞ ~17)
        if steam_id.isdigit() and len(steam_id) >= 17:
            return steam_id
        
        # –ï—Å–ª–∏ —ç—Ç–æ vanity URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º ResolveVanityURL
        vanity_data = await steam_client.resolve_vanity_url(steam_id)
        if vanity_data and vanity_data.get("success") == 1:
            return vanity_data.get("steamid")
        
        return None
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Steam URL: {e}")
        return None

# –ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
async def get_steam_id64(steam_url: str) -> Optional[str]:
    """–ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è get_steamid64_from_url"""
    return await get_steamid64_from_url(steam_url)





async def get_steamid64_from_url(steam_url: str) -> Optional[str]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è steamID64 –∏–∑ –ª—é–±–æ–≥–æ Steam URL.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ vanity URL, —Ç–∞–∫ –∏ –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏.
    """
    if not steam_url or "steamcommunity.com" not in steam_url.lower():
        logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π Steam URL: {steam_url}")
        return None

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ URL
    if "/profiles/" in steam_url:
        # –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å —Å steamID64
        match = re.search(r"/profiles/(\d+)", steam_url)
        if match:
            steam_id = match.group(1)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π steamID64
            if len(steam_id) == 17 and steam_id.startswith("765611"):
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π SteamID64: {steam_id}")
                return steam_id
            else:
                logger.warning(f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π SteamID64: {steam_id}")
                return steam_id  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –ø—É—Å—Ç—å API –ø—Ä–æ–≤–µ—Ä–∏—Ç
    elif "/id/" in steam_url:
        # Vanity URL, –Ω—É–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å
        match = re.search(r"/id/([^/]+)", steam_url)
        if match:
            vanity_name = match.group(1)
            logger.info(f"üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º vanity URL: {vanity_name}")
            resolved_id = await resolve_vanity_url(vanity_name)
            if resolved_id:
                logger.info(
                    f"‚úÖ Vanity URL '{vanity_name}' –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ SteamID64: {resolved_id}"
                )
                return resolved_id
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å vanity URL: {vanity_name}")
                return None

    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ Steam URL: {steam_url}")
    return None


@retry_async(max_attempts=3, delays=(2, 4, 8))
async def resolve_vanity_url(vanity: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π SteamID64 –ø–æ –∫–∞—Å—Ç–æ–º–Ω–æ–º—É Vanity URL"""
    api_key = os.getenv("STEAM_API_KEY")

    if not api_key:
        logger.error("STEAM_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return None

    url = f"https://api.steampowered.com/ISteamUser/ResolveVanityURL/v1/?key={api_key}&vanityurl={vanity}"

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
        await asyncio.sleep(1.5)

        timeout = aiohttp.ClientTimeout(total=30)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()

                    if data.get("response", {}).get("success") == 1:
                        steamid = data["response"].get("steamid")
                        logger.info(
                            f"‚úÖ Vanity URL '{vanity}' –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ SteamID: {steamid}"
                        )
                        return steamid
                    else:
                        logger.warning(f"‚ö†Ô∏è Vanity URL '{vanity}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Steam")
                        return None
                elif response.status == 429:
                    logger.warning(
                        f"Steam API: –ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω (429) –¥–ª—è Vanity URL '{vanity}'"
                    )
                    await asyncio.sleep(90)
                    raise RetryError("Rate limit exceeded")
                else:
                    logger.error(
                        f"Steam API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status} –¥–ª—è Vanity URL '{vanity}'"
                    )
                    return None

    except asyncio.TimeoutError:
        logger.error(f"–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ Vanity URL '{vanity}'")
        raise RetryError("Request timeout")
    except aiohttp.ClientError as e:
        logger.warning(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ Vanity URL '{vanity}': {e}")
        raise  # –ü–æ–∑–≤–æ–ª—è–µ–º retry –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è Vanity URL '{vanity}': {e}")
        return None
    except RetryError:
        raise  # –ü—Ä–æ–±—Ä–æ—Å –¥–ª—è retry –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞
    except Exception as e:
        logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ Vanity URL '{vanity}': {e}")
        raise  # –ü–æ–∑–≤–æ–ª—è–µ–º retry –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å


class SteamAPIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Steam API —Å retry –ª–æ–≥–∏–∫–æ–π –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""

    def __init__(self):
        self.api_key = config.STEAM_API_KEY
        self._request_times: List[float] = []  # –¥–ª—è rate limiting

        if not self.api_key:
            logger.warning("STEAM_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

    async def _enforce_rate_limit(self):
        """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç rate limiting: –Ω–µ –±–æ–ª–µ–µ 1 –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥—É –∏ 100 –∑–∞ 5 –º–∏–Ω—É—Ç"""
        now = time.time()

        # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
        self._request_times = [t for t in self._request_times if now - t < 300]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 5 –º–∏–Ω—É—Ç
        if len(self._request_times) >= 90:  # –°–Ω–∏–∂–µ–Ω –ª–∏–º–∏—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            sleep_time = 300 - (now - self._request_times[0]) + 10  # +10—Å –∑–∞–ø–∞—Å
            if sleep_time > 0:
                logger.warning(
                    f"Steam API: –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –ª–∏–º–∏—Ç—É 100 –∑–∞–ø—Ä–æ—Å–æ–≤, –∂–¥–µ–º {sleep_time:.1f}—Å"
                )
                await asyncio.sleep(sleep_time)
                # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
                self._request_times = [
                    t for t in self._request_times if now + sleep_time - t < 300
                ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç 1 –∑–∞–ø—Ä–æ—Å –≤ —Å–µ–∫—É–Ω–¥—É (—É–≤–µ–ª–∏—á–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
        if self._request_times and now - self._request_times[-1] < 1.2:
            sleep_time = 1.2 - (now - self._request_times[-1])
            logger.debug(f"Steam API: rate limiting, –∂–¥–µ–º {sleep_time:.2f}—Å")
            await asyncio.sleep(sleep_time)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
        self._request_times.append(time.time())

    @retry_async(max_attempts=3, delays=(2, 4, 8))
    async def _request(self, endpoint_url: str) -> Optional[dict]:
        """–ï–¥–∏–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Steam API —Å retry –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached_data = await get_cached(endpoint_url)
        if cached_data is not None:
            logger.debug(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –¥–ª—è {endpoint_url}")
            return cached_data

        # –ü—Ä–∏–º–µ–Ω—è–µ–º rate limiting
        await self._enforce_rate_limit()

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        await asyncio.sleep(1.5)

        timeout = aiohttp.ClientTimeout(total=30)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            try:
                async with session.get(endpoint_url) as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        # –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                        await set_cache(endpoint_url, data, ttl=10)
                        return data
                    elif resp.status in (401, 403):
                        logger.error("Steam API key invalid or access denied")
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        return {
                            "steam_api_error": True,
                            "error_type": "auth_error",
                        }  # –ù–ï –∫—ç—à–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                    elif resp.status == 429:
                        # –°–∫—Ä—ã–≤–∞–µ–º –æ—Ç –∏–≥—Ä–æ–∫–æ–≤, –ª–æ–≥–∏—Ä—É–µ–º –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ª–æ–≥–∏
                        from utils.logger import log_technical_error
                        import traceback

                        asyncio.create_task(
                            log_technical_error(
                                None,
                                "steam_api",
                                f"Steam API rate limit exceeded (429) –¥–ª—è {endpoint_url}",
                                traceback.format_exc(),
                            )
                        )
                        await asyncio.sleep(90)
                        raise RetryError("Rate limit exceeded")
                    elif resp.status in (400, 500, 502, 503):
                        from utils.logger import log_technical_error
                        import traceback

                        asyncio.create_task(
                            log_technical_error(
                                None,
                                "steam_api",
                                f"Steam API server error {resp.status} –¥–ª—è {endpoint_url}",
                                traceback.format_exc(),
                            )
                        )
                        raise RetryError(f"Server error {resp.status}")
                    else:
                        from utils.logger import log_technical_error
                        import traceback

                        asyncio.create_task(
                            log_technical_error(
                                None,
                                "steam_api",
                                f"Steam API –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å {resp.status} –¥–ª—è {endpoint_url}",
                                traceback.format_exc(),
                            )
                        )
                        return None
            except asyncio.TimeoutError:
                from utils.logger import log_technical_error
                import traceback

                asyncio.create_task(
                    log_technical_error(
                        None,
                        "steam_api",
                        f"Steam API timeout –¥–ª—è {endpoint_url}",
                        traceback.format_exc(),
                    )
                )
                raise RetryError("Request timeout")
            except aiohttp.ClientError as e:
                from utils.logger import log_technical_error
                import traceback

                asyncio.create_task(
                    log_technical_error(
                        None,
                        "steam_api",
                        f"Steam API ClientError: {str(e)} –¥–ª—è {endpoint_url}",
                        traceback.format_exc(),
                    )
                )
                raise  # –ü–æ–∑–≤–æ–ª—è–µ–º retry –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å

    async def _get_player_profile_data(self, steam_id: str) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –≤–∫–ª—é—á–∞—è –Ω–∏–∫–Ω–µ–π–º"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ steam_id —á–∏—Å–ª–æ–º
        if not steam_id.isdigit():
            logger.info(
                f"üîÑ Vanity URL –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ _get_player_profile_data: {steam_id}, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ SteamID64..."
            )
            resolved_id = await resolve_vanity_url(steam_id)
            if not resolved_id:
                logger.error(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å vanity URL '{steam_id}' –≤ SteamID64"
                )
                return {}
            steam_id = resolved_id
            logger.info(f"‚úÖ Vanity URL –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ SteamID64: {steam_id}")

        try:
            url = (
                f"https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/"
                f"?key={self.api_key}&steamids={steam_id}"
            )

            data = await self._request(url)

            if not data or not data.get("response", {}).get("players"):
                return {}

            player = data["response"]["players"][0]
            
            return {
                "steamid": player.get("steamid"),
                "personaname": player.get("personaname", ""),
                "profileurl": player.get("profileurl", ""),
                "avatar": player.get("avatar", ""),
                "avatarmedium": player.get("avatarmedium", ""),
                "avatarfull": player.get("avatarfull", ""),
                "communityvisibilitystate": player.get("communityvisibilitystate", 1),
                "profilestate": player.get("profilestate", 0),
                "lastlogoff": player.get("lastlogoff"),
                "timecreated": player.get("timecreated"),
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è {steam_id}: {e}")
            return {}

    async def get_player_summary(self, steam_id: str) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ steam_id —á–∏—Å–ª–æ–º
        if not steam_id.isdigit():
            logger.info(
                f"üîÑ Vanity URL –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ get_player_summary: {steam_id}, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ SteamID64..."
            )
            resolved_id = await resolve_vanity_url(steam_id)
            if not resolved_id:
                logger.error(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å vanity URL '{steam_id}' –≤ SteamID64"
                )
                return {
                    "success": False,
                    "steamid": None,
                    "personaname": None,
                    "error_message": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å vanity URL '{steam_id}' –≤ SteamID64",
                }
            steam_id = resolved_id
            logger.info(f"‚úÖ Vanity URL –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ SteamID64: {steam_id}")

        try:
            await log_to_channel(
                "API", f"–ó–∞–ø—Ä–æ—Å GetPlayerSummaries –¥–ª—è SteamID: {steam_id}"
            )

            url = (
                f"https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/"
                f"?key={self.api_key}&steamids={steam_id}"
            )

            data = await self._request(url)

            result = {
                "success": False,
                "steamid": None,
                "personaname": None,
                "error_message": "",
            }

            if not data:
                result["error_message"] = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è"
                await log_to_channel(
                    "API",
                    f"–û—à–∏–±–∫–∞ GetPlayerSummaries –¥–ª—è SteamID: {steam_id}. –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è.",
                )
                return result

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ API
            if isinstance(data, dict) and data.get("steam_api_error"):
                result["error_message"] = "Steam API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á"
                await log_to_channel(
                    "API",
                    f"–û—à–∏–±–∫–∞ GetPlayerSummaries –¥–ª—è SteamID: {steam_id}. –û—à–∏–±–∫–∞ Steam API.",
                )
                return result

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            if data.get("response", {}).get("players"):
                player = data["response"]["players"][0]
                result["success"] = True
                result["steamid"] = player.get("steamid")
                result["personaname"] = player.get("personaname", "")
            else:
                result["error_message"] = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                await log_to_channel(
                    "API",
                    f"–û—à–∏–±–∫–∞ GetPlayerSummaries –¥–ª—è SteamID: {steam_id}. –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                )

            await log_to_channel(
                "API", f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω GetPlayerSummaries –¥–ª—è SteamID: {steam_id}."
            )
            return result

        except Exception as e:
            await log_error(
                e, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ GetPlayerSummaries –¥–ª—è SteamID: {steam_id}"
            )
            raise

    

    async def fetch_steam_data(
        self, steam_id: str, force_refresh: bool = False
    ) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏–∑ Steam API —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        await log_to_channel("API", f"–ó–∞–ø—Ä–æ—Å fetch_steam_data –¥–ª—è SteamID: {steam_id}")

        if not self.api_key:
            logger.warning("Steam API key not configured, using fallback mode")
            await log_to_channel(
                "API", f"Steam API key not configured, using fallback mode"
            )
            return {
                "success": False,
                "steamid": None,
                "personaname": None,
                "error_message": "Steam API key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
            }

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
        player_info = await self.get_player_summary(steam_id)
        
        await log_to_channel(
            "API", f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω fetch_steam_data –¥–ª—è SteamID: {steam_id}"
        )
        return player_info

    

    def force_cache_clear_for_profile(self, steam_id: str):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ—Ç –∫—ç—à –¥–ª—è –≤—Å–µ—Ö API endpoints —ç—Ç–æ–≥–æ Steam ID"""
        try:
            from utils.cache import _cache, _lock
            import asyncio

            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            keys_to_remove = []

            # –ò—â–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∫—ç—à–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —ç—Ç–æ—Ç Steam ID
            for key in _cache.keys():
                if steam_id in key:
                    keys_to_remove.append(key)

            # –£–¥–∞–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
            for key in keys_to_remove:
                _cache.pop(key, None)
                logger.info(f"üóëÔ∏è –û—á–∏—â–µ–Ω –∫—ç—à –¥–ª—è –∫–ª—é—á–∞: {key}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ Steam: {e}")
            log_error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ Steam: {e}")


# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
steam_client = SteamAPIClient()


async def fetch_steam_data(steam_id: str, force_refresh: bool = False) -> dict:
    """–§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    return await steam_client.fetch_steam_data(steam_id, force_refresh)
