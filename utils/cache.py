
import asyncio
import time
import logging

logger = logging.getLogger(__name__)

_cache_data = {}
_cache_expiry = {}
_lock = asyncio.Lock()


class Cache:
    """–ü—Ä–æ—Å—Ç–æ–π –∫—ç—à —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π dict-–ø–æ–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
    
    def __init__(self):
        self.data = _cache_data
        self.expiry = _cache_expiry
    
    def __getitem__(self, key):
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ cache[key]"""
        result = asyncio.create_task(self.get(key))
        return result.result() if hasattr(result, 'result') else None
    
    def __setitem__(self, key, value):
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ cache[key] = value"""
        asyncio.create_task(self.set(key, value))
    
    async def get(self, key, default=None):
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞"""
        async with _lock:
            if key in self.data:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
                if key in self.expiry and self.expiry[key] < time.time():
                    # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ - —É–¥–∞–ª—è–µ–º
                    self.data.pop(key, None)
                    self.expiry.pop(key, None)
                    return default
                return self.data[key]
            return default
    
    async def set(self, key, value, ttl=300):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫—ç—à"""
        async with _lock:
            self.data[key] = value
            self.expiry[key] = time.time() + ttl
    
    async def delete(self, key):
        """–£–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞"""
        async with _lock:
            self.data.pop(key, None)
            self.expiry.pop(key, None)
    
    def clear(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à"""
        self.data.clear()
        self.expiry.clear()
        logger.info("üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω")
    
    def info(self):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ"""
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        current_time = time.time()
        active_count = sum(1 for key in self.data if key not in self.expiry or self.expiry[key] >= current_time)
        logger.info(f"üíæ –ö—ç—à: {active_count} –∑–∞–ø–∏—Å–µ–π")
        return active_count


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
cache = Cache()


# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API
async def get_cached(key, default=None):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ (—Å—Ç–∞—Ä—ã–π API)"""
    return await cache.get(key, default)


async def set_cache(key, data, ttl=300):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à (—Å—Ç–∞—Ä—ã–π API)"""
    await cache.set(key, data, ttl)


def clear_cache():
    """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à (—Å—Ç–∞—Ä—ã–π API)"""
    cache.clear()
