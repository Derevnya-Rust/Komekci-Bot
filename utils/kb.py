
import json
import os
import logging
from typing import List, Dict, Any
from config import config

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
_kb_data = {"chunks": [], "faq": []}
_kb_loaded = False


class KnowledgeBase:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π"""
    
    def __init__(self):
        self.data = {"chunks": [], "faq": []}
    
    def get_all_fragments(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        fragments = []
        if self.data.get("chunks"):
            fragments.extend([chunk.get("content", "") for chunk in self.data["chunks"] if isinstance(chunk, dict)])
        if self.data.get("faq"):
            fragments.extend([faq.get("answer", "") for faq in self.data["faq"] if isinstance(faq, dict)])
        return fragments
    
    def add_fragment(self, text: str):
        """–î–æ–±–∞–≤–∏—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
        if not text or len(text.strip()) < 10:
            return False
            
        fragment = {
            "content": text.strip(),
            "created_at": "",
            "source": "manual"
        }
        self.data["chunks"].append(fragment)
        return self.save()
    
    def save(self) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –≤ —Ñ–∞–π–ª"""
        return save_kb()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
kb = KnowledgeBase()


def load_kb() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
    global _kb_data, _kb_loaded
    
    try:
        if os.path.exists(config.KB_PATH):
            with open(config.KB_PATH, "r", encoding="utf-8") as f:
                data = json.load(f)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö
                if isinstance(data, list):
                    # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤
                    _kb_data = {"chunks": [], "faq": []}
                    for item in data:
                        if isinstance(item, dict) and item.get("text"):
                            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
                            text = item["text"].strip()
                            if len(text) > 50:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
                                _kb_data["chunks"].append({
                                    "content": text,
                                    "channel_id": item.get("cid"),
                                    "message_id": item.get("id")
                                })
                elif isinstance(data, dict):
                    # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
                    _kb_data = data
                    if "chunks" not in _kb_data:
                        _kb_data["chunks"] = []
                    if "faq" not in _kb_data:
                        _kb_data["faq"] = []
                else:
                    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –±–∞–∑—É
                    _kb_data = {"chunks": [], "faq": []}
                
                kb.data = _kb_data
                _kb_loaded = True
        else:
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
            _kb_data = {"chunks": [], "faq": []}
            kb.data = _kb_data
            _kb_loaded = True
            logger.debug("üìö –§–∞–π–ª –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω–∞ –ø—É—Å—Ç–∞—è –±–∞–∑–∞")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
        _kb_data = {"chunks": [], "faq": []}
        kb.data = _kb_data
        _kb_loaded = True
    
    chunks_count = len(_kb_data.get("chunks", []))
    faq_count = len(_kb_data.get("faq", []))
    
    return {
        "chunks": chunks_count,
        "faq": faq_count,
        "total": chunks_count + faq_count,
        "loaded": _kb_loaded
    }


def ensure_kb_loaded():
    """–£–±–µ–∂–¥–∞–µ—Ç—Å—è —á—Ç–æ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞"""
    global _kb_loaded
    if not _kb_loaded:
        load_kb()


def get_context(query: str, k: int = 5) -> List[str]:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
    ensure_kb_loaded()
    
    # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    query_lower = query.lower()
    results = []
    
    for chunk in _kb_data.get("chunks", []):
        if isinstance(chunk, dict):
            content = chunk.get("content", "")
            if any(word in content.lower() for word in query_lower.split()):
                results.append(content[:500])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    
    for faq in _kb_data.get("faq", []):
        if isinstance(faq, dict):
            question = faq.get("question", "")
            answer = faq.get("answer", "")
            if any(word in question.lower() or word in answer.lower() for word in query_lower.split()):
                results.append(f"Q: {question}\nA: {answer}")
    
    return results[:k]


def save_kb() -> bool:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –≤ —Ñ–∞–π–ª"""
    try:
        os.makedirs(os.path.dirname(config.KB_PATH), exist_ok=True)
        with open(config.KB_PATH, "w", encoding="utf-8") as f:
            json.dump(_kb_data, f, ensure_ascii=False, indent=2)
        logger.debug("üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
        return False


async def update_from_channels(bot) -> Dict[str, int]:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏–∑ Discord –∫–∞–Ω–∞–ª–æ–≤"""
    global _kb_data
    stats = {"messages": 0}
    new_chunks = []
    
    try:
        for channel_id in config.KB_CHANNEL_IDS:
            channel = bot.get_channel(channel_id)
            if channel:
                message_count = 0
                async for message in channel.history(limit=100):
                    if message.content and len(message.content) > 50:
                        new_chunks.append({
                            "content": message.content.strip(),
                            "channel_id": channel_id,
                            "message_id": message.id,
                            "created_at": message.created_at.isoformat()
                        })
                        message_count += 1
                
                stats["messages"] += message_count
                logger.debug(f"üìö –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ #{channel.name}: {message_count}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        _kb_data["chunks"] = new_chunks
        kb.data = _kb_data
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        save_kb()
        
        stats["chunks"] = len(new_chunks)
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
    
    return stats
