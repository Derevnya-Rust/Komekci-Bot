import logging
from utils.validators import is_valid_nickname, auto_fix_nickname
from utils.decision import NickCheckResult

logger = logging.getLogger(__name__)


class NicknameModerator:
    """–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–∏–∫–Ω–µ–π–º–æ–≤"""

    def __init__(self):
        pass

    @staticmethod
    async def check_nickname(user, nickname: str) -> NickCheckResult:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∏–∫–Ω–µ–π–º –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        try:
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∏–∫–Ω–µ–π–º–∞: '{nickname}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.display_name if hasattr(user, 'display_name') else 'Unknown'}")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
            is_valid, error_message, _ = is_valid_nickname(nickname)

            if is_valid:
                logger.info(f"‚úÖ –ù–∏–∫–Ω–µ–π–º '{nickname}' –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É")
                return NickCheckResult(
                    approve=True,
                    reasons=[],
                    fixed_full=None,
                    notes_to_user="–ù–∏–∫–Ω–µ–π–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"
                )
            else:
                logger.info(f"‚ùå –ù–∏–∫–Ω–µ–π–º '{nickname}' –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É: {error_message}")

                # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å
                fixed_nick, fixes = auto_fix_nickname(nickname)

                if fixes:
                    logger.info(f"üîß –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è '{nickname}': '{fixed_nick}' (–ø—Ä–∏–º–µ–Ω–µ–Ω—ã: {', '.join(fixes)})")
                    notes = f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {', '.join(fixes)}"
                else:
                    logger.info(f"‚ö†Ô∏è –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è '{nickname}' –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")
                    notes = "–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"

                return NickCheckResult(
                    approve=False,
                    reasons=[error_message],
                    fixed_full=fixed_nick if fixes else None,
                    notes_to_user=notes
                )

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∏–∫–Ω–µ–π–º–∞ '{nickname}': {e}")
            return NickCheckResult(
                approve=False,
                reasons=[f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"],
                fixed_full=None,
                notes_to_user="–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
            )